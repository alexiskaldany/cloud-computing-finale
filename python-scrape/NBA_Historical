{"cells":[{"cell_type":"markdown","metadata":{"id":"H263srD_VovJ"},"source":["# NBA DATA SCRAPE - HISTORICAL"]},{"cell_type":"markdown","metadata":{"id":"blj0qkSbdGbH"},"source":["# PACKAGE IMPORT / INSTALL"]},{"cell_type":"code","source":["## TAKE CAUTION WITH INSTALL - MAY AFFECT SUBSEQUENT IMPORTS OR REQUIRE RUNTIME RESTART\n","\n","#!pip install basketball-reference-scraper==v1.0.3"],"metadata":{"id":"avpPj_5VUC0s"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":162,"status":"ok","timestamp":1649190868862,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"},"user_tz":240},"id":"OoMkES6eetcV","outputId":"ae028ef6-e82a-401c-e1dc-c977e505632c"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","IMPORT SUCCESS\n"]}],"source":["# LIBRARY IMPORTS\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","from scipy import stats as stats\n","import statistics\n","\n","import requests\n","from bs4 import BeautifulSoup\n","import json\n","import time\n","import nltk\n","import re\n","\n","from google.colab import drive\n","\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.decomposition import PCA\n","\n","#from tabulate import tabulate\n","#from difflib import get_close_matches\n","#from itertools import islice\n","\n","print(\"\\nIMPORT SUCCESS\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1138,"status":"ok","timestamp":1649190872287,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"},"user_tz":240},"id":"jbIe53iGVlKL","outputId":"cbc96a27-ac49-4c92-f6d7-d031e09d04d9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at drive; to attempt to forcibly remount, call drive.mount(\"drive\", force_remount=True).\n"]}],"source":["drive.mount('drive')"]},{"cell_type":"markdown","source":["# BASKETBALL REFERENCE"],"metadata":{"id":"6sFp82JaIeou"}},{"cell_type":"markdown","source":["https://github.com/vishaalagartha/basketball_reference_scraper/blob/master/examples.py"],"metadata":{"id":"TIYDhAvlNw8T"}},{"cell_type":"markdown","source":["## IMPORT / INSTALL"],"metadata":{"id":"3RsWohpTLiBp"}},{"cell_type":"code","source":["#!pip install basketball-reference-scraper==v1.0.3\n","from basketball_reference_scraper.teams import get_roster, get_team_stats, get_opp_stats, get_roster_stats, get_team_misc\n","from basketball_reference_scraper.players import get_stats, get_game_logs\n","from basketball_reference_scraper.seasons import get_schedule, get_standings\n","from basketball_reference_scraper.box_scores import get_box_scores\n","from basketball_reference_scraper.pbp import get_pbp\n","from basketball_reference_scraper.shot_charts import get_shot_chart"],"metadata":{"id":"TAv8DZeTSaKE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## STAT VARIABLES"],"metadata":{"id":"B0O2lXZqiITZ"}},{"cell_type":"code","source":["# Start Date fixed to reflect modern-day NBA Expansion to 30 teams in 2004\n","\n","current_date = '2022-03-30'\n","current_year = 2022\n","\n","start_2004 = '2003-11-01'\n","start_2000 = '1999-11-01'\n","start_2010 = '2009-11-01'\n","\n","\n","team_code_dict = {'Charlotte Hornets':'CHO', 'Dallas Mavericks':'DAL', 'Denver Nuggets':'DEN',\n","                  'Houston Rockets':'HOU', 'Los Angeles Clippers':'LAC', 'Miami Heat':'MIA',\n","                  'New Jersey Nets':'BRK', 'New York Knicks':'NYK', 'San Antonio Spurs':'SAS',\n","                  'Toronto Raptors':'TOR', 'Utah Jazz':'UTA', 'Vancouver Grizzlies':'MEM',\n","                  'Washington Wizards':'WAS', 'Boston Celtics':'BOS', 'Chicago Bulls':'CHI',\n","                  'Cleveland Cavaliers':'CLE', 'Los Angeles Lakers':'LAL', 'Orlando Magic':'ORL',\n","                  'Portland Trail Blazers':'POR', 'Atlanta Hawks':'ATL', 'Phoenix Suns':'PHO',\n","                  'Seattle SuperSonics':'OKC', 'Detroit Pistons':'DET', 'Sacramento Kings':'SAC',\n","                  'Golden State Warriors':'GSW', 'Indiana Pacers':'IND', 'Milwaukee Bucks':'MIL',\n","                  'Minnesota Timberwolves':'MIN', 'Philadelphia 76ers':'PHI', 'Memphis Grizzlies':'MEM',\n","                  'New Orleans Hornets':'NOP', 'Charlotte Bobcats':'CHO', 'New Orleans/Oklahoma City Hornets':'NOP',\n","                  'Oklahoma City Thunder':'OKC', 'Brooklyn Nets':'BRK', 'New Orleans Pelicans':'NOP'\n","                  }\n","\n","                  # PENDING CODE CONVERSION / MAPPING:\n","                    # PHO = PHX\n","                    # CHO = CHA\n","                    # BRK = BKN\n","\n","team_codes = team_code_dict.values()\n","print(team_codes)"],"metadata":{"id":"OAVQtj2giHa6","executionInfo":{"status":"ok","timestamp":1648942198619,"user_tz":240,"elapsed":491,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"5fe15af7-2c07-406f-88bb-af1be0cbe284"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["dict_values(['CHO', 'DAL', 'DEN', 'HOU', 'LAC', 'MIA', 'BRK', 'NYK', 'SAS', 'TOR', 'UTA', 'MEM', 'WAS', 'BOS', 'CHI', 'CLE', 'LAL', 'ORL', 'POR', 'ATL', 'PHO', 'OKC', 'DET', 'SAC', 'GSW', 'IND', 'MIL', 'MIN', 'PHI', 'MEM', 'NOP', 'CHO', 'NOP', 'OKC', 'BRK', 'NOP'])\n"]}]},{"cell_type":"markdown","source":["## TEAM ROSTERS"],"metadata":{"id":"bErBEqQHRglw"}},{"cell_type":"code","source":["# GENERATE TEAM ROSTERS DATAFRAME\n","# ** RUNTIME: ~20 SECONDS **\n","\n","team_rosters_2022 = pd.DataFrame()\n","\n","for team in team_codes:\n","  temp_df = get_roster(team, 2022)\n","  temp_df['TEAM'] = team\n","  team_rosters_2022 = team_rosters_2022.append(temp_df)\n","\n","print(team_rosters_2022)\n","#print(team_rosters.info())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZjjLkg4THMN4","executionInfo":{"status":"ok","timestamp":1648836584802,"user_tz":240,"elapsed":21910,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"4140fd35-7f89-4b4a-a402-36f3035f3411"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   NUMBER             PLAYER POS HEIGHT  WEIGHT BIRTH_DATE NATIONALITY  \\\n","0       0      Miles Bridges  PF    6-6     225 1998-03-21          US   \n","1      12    Kelly Oubre Jr.  SF    6-7     203 1995-12-09          US   \n","2       2        LaMelo Ball  PG    6-7     180 2001-08-22          US   \n","3       3       Terry Rozier  SG    6-1     190 1994-03-17          US   \n","4      24      Mason Plumlee   C   6-11     254 1990-03-05          US   \n","..    ...                ...  ..    ...     ...        ...         ...   \n","12      3        CJ McCollum  SG    6-3     190 1991-09-19          US   \n","13     21         Tony Snell  SG    6-6     213 1991-11-10          US   \n","14     22    Larry Nance Jr.  PF    6-7     245 1993-01-01          US   \n","15      2  Jared Harper (TW)  PG   5-10     175 1997-09-14          US   \n","16    NaN    Zion Williamson  PF    6-6     284 2000-07-06          US   \n","\n","   EXPERIENCE         COLLEGE TEAM  \n","0           3  Michigan State  CHO  \n","1           6          Kansas  CHO  \n","2           1             NaN  CHO  \n","3           6      Louisville  CHO  \n","4           8            Duke  CHO  \n","..        ...             ...  ...  \n","12          8          Lehigh  NOP  \n","13          8      New Mexico  NOP  \n","14          6         Wyoming  NOP  \n","15          2          Auburn  NOP  \n","16          2            Duke  NOP  \n","\n","[615 rows x 10 columns]\n"]}]},{"cell_type":"code","source":["# SCRAPE TEAM ROSTER STATS - 2022\n","# ** RUNTIME: ~2 MIN **\n","\n","team_roster_stats_2022 = pd.DataFrame()\n","\n","for team in team_codes:\n","  temp_df = get_roster_stats(team, 2022, data_format='PER_GAME', playoffs=False)\n","  temp_df['TEAM'] = team\n","  team_roster_stats_2022 = team_roster_stats_2022.append(temp_df)\n","\n","print(team_roster_stats_2022)"],"metadata":{"id":"vgfV203880Gv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648836983284,"user_tz":240,"elapsed":108586,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"e484a6bd-9040-48eb-f5e4-43da33089c41"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                 PLAYER POS AGE TEAM   G  GS    MP   FG   FGA   FG%  ...  ORB  \\\n","0           LaMelo Ball  PG  20  CHO  70  70  32.4  7.1  16.8  .425  ...  1.5   \n","1       James Bouknight  SG  21  CHO  28   0  10.6  1.7   4.9  .353  ...  0.8   \n","2         Miles Bridges  PF  23  CHO  75  75  35.9  7.5  15.3  .490  ...  1.2   \n","3      Vernon Carey Jr.   C  20  CHO   4   1   4.3  0.8   1.5  .500  ...  0.8   \n","4      Montrezl Harrell   C  28  CHO  21   0  21.1  4.3   6.9  .628  ...  2.3   \n","..                  ...  ..  ..  ...  ..  ..   ...  ...   ...   ...  ...  ...   \n","17  TomÃ¡Å¡ SatoranskÃ½  SG  30  NOP  32   3  15.0  1.0   3.3  .299  ...  0.6   \n","18           Tony Snell  SG  30  NOP  11   2  20.9  2.2   5.1  .429  ...  0.4   \n","19       Garrett Temple  SG  35  NOP  56  16  18.9  1.9   5.0  .383  ...  0.5   \n","20  Jonas ValanÄiÅ«nas   C  29  NOP  70  70  30.8  7.0  13.0  .542  ...  3.1   \n","21       Tyrone Wallace  SG  27  NOP   6   0  12.5  1.2   3.3  .350  ...  0.0   \n","\n","    DRB   TRB  AST  STL  BLK  TOV   PF   PTS   SEASON  \n","0   5.2   6.7  7.5  1.6  0.4  3.1  3.2  20.0  2021-22  \n","1   1.0   1.7  0.8  0.3  0.0  0.5  1.0   5.0  2021-22  \n","2   5.9   7.1  3.8  1.0  0.9  1.9  2.5  20.3  2021-22  \n","3   0.5   1.3  0.0  0.3  0.0  0.3  0.3   2.0  2021-22  \n","4   3.0   5.2  1.9  0.4  0.4  0.9  2.0  11.6  2021-22  \n","..  ...   ...  ...  ...  ...  ...  ...   ...      ...  \n","17  1.4   2.0  2.4  0.4  0.0  0.7  1.0   2.8  2021-22  \n","18  2.2   2.5  0.5  0.5  0.2  0.6  1.9   6.0  2021-22  \n","19  2.0   2.5  1.3  0.8  0.4  0.7  1.4   5.4  2021-22  \n","20  8.5  11.6  2.6  0.6  0.8  2.5  3.3  18.1  2021-22  \n","21  1.3   1.3  0.2  0.5  0.2  0.3  1.2   2.8  2021-22  \n","\n","[835 rows x 30 columns]\n"]}]},{"cell_type":"code","source":["# SCRAPE TEAM ROSTER STATS - 2021\n","# ** RUNTIME: ~2.5 MIN **\n","\n","team_roster_stats_2021 = pd.DataFrame()\n","\n","for team in team_codes:\n","  temp_df = get_roster_stats(team, 2021, data_format='PER_GAME', playoffs=False)\n","  temp_df['TEAM'] = team\n","  team_roster_stats_2021 = team_roster_stats_2021.append(temp_df)\n","\n","print(team_roster_stats_2021)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UvFnHyt5GYEH","executionInfo":{"status":"ok","timestamp":1648837150931,"user_tz":240,"elapsed":130885,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"a0c0c097-c371-44fc-c620-564d7b434df4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                 PLAYER POS AGE TEAM   G  GS    MP    FG   FGA   FG%  ...  \\\n","0           LaMelo Ball  PG  19  CHO  51  31  28.8   5.7  13.2  .436  ...   \n","1       Bismack Biyombo   C  28  CHO  66  36  20.4   2.2   3.7  .587  ...   \n","2         Miles Bridges  PF  22  CHO  66  19  29.3   4.7   9.4  .503  ...   \n","3      Vernon Carey Jr.   C  19  CHO  19   4   6.1   0.9   1.9  .500  ...   \n","4          Nate Darling  SG  22  CHO   7   0   3.7   0.3   1.0  .286  ...   \n","..                  ...  ..  ..  ...  ..  ..   ...   ...   ...   ...  ...   \n","16       James Nunnally  SF  30  NOP   9   0   5.3   0.6   1.4  .385  ...   \n","17          J.J. Redick  SG  36  NOP  31   0  18.6   2.8   6.9  .407  ...   \n","18        Isaiah Thomas  PG  31  NOP   3   0  16.0   3.0   9.0  .333  ...   \n","19  Sindarius Thornwell  SG  26  NOP  14   1   5.2   0.5   1.5  .333  ...   \n","20      Zion Williamson  PF  20  NOP  61  61  33.2  10.4  17.0  .611  ...   \n","\n","    ORB  DRB  TRB  AST  STL  BLK  TOV   PF   PTS   SEASON  \n","0   1.2  4.7  5.9  6.1  1.6  0.4  2.8  2.7  15.7  2020-21  \n","1   2.1  3.2  5.3  1.2  0.3  1.1  1.1  2.1   5.0  2020-21  \n","2   1.2  4.8  6.0  2.2  0.7  0.8  1.6  2.2  12.7  2020-21  \n","3   0.3  1.1  1.4  0.1  0.1  0.3  0.3  0.7   2.4  2020-21  \n","4   0.1  0.0  0.1  0.1  0.0  0.1  0.1  0.1   1.3  2020-21  \n","..  ...  ...  ...  ...  ...  ...  ...  ...   ...      ...  \n","16  0.2  0.8  1.0  0.3  0.0  0.0  0.2  0.1   1.7  2020-21  \n","17  0.1  1.6  1.7  1.3  0.3  0.1  0.8  1.2   8.7  2020-21  \n","18  0.3  1.0  1.3  1.7  0.3  0.0  2.0  1.0   7.7  2020-21  \n","19  0.1  0.3  0.4  0.3  0.4  0.1  0.3  0.2   1.2  2020-21  \n","20  2.7  4.5  7.2  3.7  0.9  0.6  2.7  2.2  27.0  2020-21  \n","\n","[752 rows x 30 columns]\n"]}]},{"cell_type":"code","source":["# SCRAPE TEAM ROSTER STATS - 2020\n","# ** RUNTIME: ~3 MIN **\n","\n","team_roster_stats_2020 = pd.DataFrame()\n","\n","for team in team_codes:\n","  temp_df = get_roster_stats(team, 2020, data_format='PER_GAME', playoffs=False)\n","  temp_df['TEAM'] = team\n","  team_roster_stats_2020 = team_roster_stats_2020.append(temp_df)\n","\n","print(team_roster_stats_2020)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iFKuMU5bKQAe","executionInfo":{"status":"ok","timestamp":1648837344565,"user_tz":240,"elapsed":174037,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"eba911cf-2f20-4477-8dbf-edd62daf87c2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                 PLAYER POS AGE TEAM   G  GS    MP   FG   FGA   FG%  ...  ORB  \\\n","0          Dwayne Bacon  SG  24  CHO  39  11  17.6  2.2   6.3  .348  ...  0.4   \n","1         Nicolas Batum  SF  31  CHO  22   3  23.0  1.3   3.7  .346  ...  1.1   \n","2       Bismack Biyombo   C  27  CHO  53  29  19.4  2.8   5.2  .543  ...  2.3   \n","3         Miles Bridges  SF  21  CHO  65  64  30.7  4.9  11.6  .424  ...  1.4   \n","4           Joe Chealey  PG  24  CHO   4   0   8.3  0.0   1.8  .000  ...  0.0   \n","..                  ...  ..  ..  ...  ..  ..   ...  ...   ...   ...  ...  ...   \n","12        Jahlil Okafor   C  24  NOP  30   9  15.6  3.4   5.4  .623  ...  1.6   \n","13          J.J. Redick  SG  35  NOP  60  36  26.4  4.8  10.5  .453  ...  0.2   \n","14  Sindarius Thornwell  SF  25  NOP   2   0  17.5  3.0   5.5  .545  ...  0.0   \n","15     Kenrich Williams  PF  25  NOP  39  18  21.3  1.3   3.8  .347  ...  1.3   \n","16      Zion Williamson  PF  19  NOP  24  24  27.8  8.8  15.0  .583  ...  2.7   \n","\n","    DRB  TRB  AST  STL  BLK  TOV   PF   PTS   SEASON  \n","0   2.2  2.6  1.3  0.6  0.1  0.9  1.3   5.7  2019-20  \n","1   3.4  4.5  3.0  0.8  0.4  1.0  1.9   3.6  2019-20  \n","2   3.5  5.8  0.9  0.2  0.9  0.9  2.2   7.4  2019-20  \n","3   4.2  5.6  1.8  0.6  0.7  1.5  2.0  13.0  2019-20  \n","4   0.0  0.0  0.3  1.0  0.0  0.5  0.5   0.5  2019-20  \n","..  ...  ...  ...  ...  ...  ...  ...   ...      ...  \n","12  2.6  4.2  1.2  0.2  0.7  1.3  2.2   8.1  2019-20  \n","13  2.4  2.5  2.0  0.3  0.2  1.3  1.6  15.3  2019-20  \n","14  2.0  2.0  2.0  0.5  0.5  1.0  1.0   8.0  2019-20  \n","15  3.5  4.8  1.5  0.7  0.5  0.6  2.3   3.5  2019-20  \n","16  3.6  6.3  2.1  0.7  0.4  2.5  1.8  22.5  2019-20  \n","\n","[704 rows x 30 columns]\n"]}]},{"cell_type":"code","source":["# SCRAPE TEAM ROSTER STATS - 2019\n","# ** RUNTIME: ~3 MIN **\n","\n","team_roster_stats_2019 = pd.DataFrame()\n","\n","for team in team_codes:\n","  temp_df = get_roster_stats(team, 2019, data_format='PER_GAME', playoffs=False)\n","  temp_df['TEAM'] = team\n","  team_roster_stats_2019 = team_roster_stats_2019.append(temp_df)\n","\n","print(team_roster_stats_2019)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tbDzN-ioWnG3","executionInfo":{"status":"ok","timestamp":1648837597373,"user_tz":240,"elapsed":164287,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"31cefb1f-e869-4c27-96e1-b77ea8b2b9e9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              PLAYER POS AGE TEAM   G  GS    MP   FG   FGA   FG%  ...  ORB  \\\n","0       Dwayne Bacon  SG  23  CHO  43  13  17.7  2.8   6.0  .475  ...  0.2   \n","1      Nicolas Batum  SF  30  CHO  75  72  31.4  3.4   7.5  .450  ...  0.9   \n","2    Bismack Biyombo   C  26  CHO  54  32  14.5  1.6   2.9  .571  ...  1.5   \n","3      Miles Bridges  SF  20  CHO  80  25  21.2  3.0   6.4  .464  ...  0.8   \n","4        Joe Chealey  PG  23  CHO   1   0   8.0  1.0   3.0  .333  ...  0.0   \n","..               ...  ..  ..  ...  ..  ..   ...  ...   ...   ...  ...  ...   \n","15     Elfrid Payton  PG  24  NOP  42  42  29.8  4.3   9.8  .434  ...  1.2   \n","16     Julius Randle  PF  24  NOP  73  49  30.6  7.8  14.9  .524  ...  2.2   \n","17       Jason Smith   C  32  NOP   2   0  10.0  1.0   4.5  .222  ...  1.0   \n","18  Kenrich Williams  SF  24  NOP  46  29  23.5  2.3   6.1  .384  ...  1.2   \n","19    Christian Wood  PF  23  NOP   8   2  23.6  6.1  11.5  .533  ...  1.6   \n","\n","    DRB  TRB  AST  STL  BLK  TOV   PF   PTS   SEASON  \n","0   1.9  2.1  1.1  0.3  0.1  0.4  1.7   7.3  2018-19  \n","1   4.3  5.2  3.3  0.9  0.6  1.6  1.9   9.3  2018-19  \n","2   3.1  4.6  0.6  0.2  0.8  0.6  1.9   4.4  2018-19  \n","3   3.2  4.0  1.2  0.7  0.6  0.6  1.4   7.5  2018-19  \n","4   0.0  0.0  1.0  0.0  0.0  0.0  1.0   2.0  2018-19  \n","..  ...  ...  ...  ...  ...  ...  ...   ...      ...  \n","15  4.1  5.2  7.6  1.0  0.4  2.7  1.9  10.6  2018-19  \n","16  6.5  8.7  3.1  0.7  0.6  2.8  3.4  21.4  2018-19  \n","17  1.0  2.0  0.5  0.0  0.0  0.5  1.5   4.0  2018-19  \n","18  3.6  4.8  1.8  1.0  0.4  0.8  2.1   6.1  2018-19  \n","19  6.3  7.9  0.8  0.9  1.3  1.8  1.8  16.9  2018-19  \n","\n","[744 rows x 30 columns]\n"]}]},{"cell_type":"code","source":["# SCRAPE TEAM ROSTER STATS - 2018\n","# ** RUNTIME: ~2 MIN **\n","\n","team_roster_stats_2018 = pd.DataFrame()\n","\n","for team in team_codes:\n","  temp_df = get_roster_stats(team, 2018, data_format='PER_GAME', playoffs=False)\n","  temp_df['TEAM'] = team\n","  team_roster_stats_2018 = team_roster_stats_2018.append(temp_df)\n","\n","print(team_roster_stats_2018)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E5KakLxtWnex","executionInfo":{"status":"ok","timestamp":1648837771390,"user_tz":240,"elapsed":116048,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"ba810271-8ec0-462b-8435-98cfc61e2492"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                     PLAYER POS AGE TEAM   G  GS    MP   FG   FGA   FG%  ...  \\\n","0              Dwayne Bacon  SG  22  CHO  53   6  13.5  1.4   3.6  .375  ...   \n","1             Nicolas Batum  SG  29  CHO  64  64  31.0  4.2  10.2  .415  ...   \n","2   Michael Carter-Williams  PG  26  CHO  52   2  16.1  1.5   4.4  .332  ...   \n","3            Treveon Graham  SG  24  CHO  63   2  16.7  1.5   3.5  .434  ...   \n","4        Willy HernangÃ³mez   C  23  CHO  22   1  11.9  1.9   3.8  .506  ...   \n","..                      ...  ..  ..  ...  ..  ..   ...  ...   ...   ...  ...   \n","18            E'Twaun Moore  SG  28  NOP  82  80  31.5  5.2  10.1  .508  ...   \n","19            Jameer Nelson  PG  35  NOP  43   0  20.9  2.0   4.8  .410  ...   \n","20             Emeka Okafor   C  35  NOP  26  19  13.6  1.8   3.7  .505  ...   \n","21              Rajon Rondo  PG  31  NOP  65  63  26.2  3.6   7.6  .468  ...   \n","22               Josh Smith  PF  32  NOP   3   0   4.0  0.3   1.3  .250  ...   \n","\n","    ORB  DRB  TRB  AST  STL  BLK  TOV   PF   PTS   SEASON  \n","0   0.1  2.3  2.3  0.7  0.3  0.0  0.4  0.9   3.3  2017-18  \n","1   0.9  3.9  4.8  5.5  1.0  0.4  2.0  1.1  11.6  2017-18  \n","2   0.7  1.9  2.7  2.2  0.8  0.4  1.0  1.9   4.6  2017-18  \n","3   0.7  1.3  1.9  0.9  0.5  0.0  0.4  1.7   4.3  2017-18  \n","4   1.8  3.5  5.3  0.5  0.5  0.4  0.4  1.5   6.1  2017-18  \n","..  ...  ...  ...  ...  ...  ...  ...  ...   ...      ...  \n","18  0.7  2.2  2.9  2.3  1.0  0.1  1.2  2.2  12.5  2017-18  \n","19  0.3  2.0  2.2  3.6  0.5  0.1  1.3  1.6   5.1  2017-18  \n","20  1.8  2.8  4.6  0.3  0.3  1.0  0.5  1.2   4.4  2017-18  \n","21  0.5  3.6  4.0  8.2  1.1  0.2  2.3  1.8   8.3  2017-18  \n","22  1.0  0.3  1.3  0.0  0.0  0.0  0.0  1.0   0.7  2017-18  \n","\n","[731 rows x 30 columns]\n"]}]},{"cell_type":"code","source":["# SCRAPE TEAM ROSTER STATS - 2017\n","# ** RUNTIME: ~1.5 MIN **\n","\n","team_roster_stats_2017 = pd.DataFrame()\n","\n","for team in team_codes:\n","  temp_df = get_roster_stats(team, 2017, data_format='PER_GAME', playoffs=False)\n","  temp_df['TEAM'] = team\n","  team_roster_stats_2017 = team_roster_stats_2017.append(temp_df)\n","\n","print(team_roster_stats_2017)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gzE_QHGaWn2-","executionInfo":{"status":"ok","timestamp":1648837904237,"user_tz":240,"elapsed":83100,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"ebb7b21e-6574-4745-afb5-6ec50b3699e0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              PLAYER POS AGE TEAM   G  GS    MP   FG   FGA   FG%  ...  ORB  \\\n","0      Nicolas Batum  SG  28  CHO  77  77  34.0  5.1  12.7  .403  ...  0.6   \n","1    Marco Belinelli  SG  30  CHO  74   0  24.0  3.6   8.3  .429  ...  0.2   \n","2     Treveon Graham  SG  23  CHO  27   1   7.0  0.7   1.5  .475  ...  0.2   \n","3     Aaron Harrison  SG  22  CHO   5   0   3.4  0.0   0.8  .000  ...  0.0   \n","4      Spencer Hawes  PF  28  CHO  35   1  17.9  3.0   6.2  .477  ...  0.9   \n","..               ...  ..  ..  ...  ..  ..   ...  ...   ...   ...  ...  ...   \n","21      Wayne Selden  SG  22  NOP   3   3  15.7  1.7   2.7  .625  ...  0.0   \n","22  Lance Stephenson  SG  26  NOP   6   0  27.0  4.3   9.2  .473  ...  0.5   \n","23   Hollis Thompson  SG  25  NOP   9   8  21.2  1.2   4.6  .268  ...  0.4   \n","24      Axel Toupane  SF  24  NOP   2   0  20.5  2.5   4.0  .625  ...  0.0   \n","25   Reggie Williams  SF  30  NOP   6   0  13.2  1.3   3.8  .348  ...  0.3   \n","\n","    DRB  TRB  AST  STL  BLK  TOV   PF   PTS   SEASON  \n","0   5.6  6.2  5.9  1.1  0.4  2.5  1.4  15.1  2016-17  \n","1   2.2  2.4  2.0  0.6  0.1  0.9  1.2  10.5  2016-17  \n","2   0.6  0.8  0.2  0.2  0.0  0.1  0.7   2.1  2016-17  \n","3   0.6  0.6  0.6  0.0  0.0  0.0  0.4   0.2  2016-17  \n","4   3.3  4.2  1.8  0.4  0.7  1.1  1.7   7.3  2016-17  \n","..  ...  ...  ...  ...  ...  ...  ...   ...      ...  \n","21  1.7  1.7  0.3  0.7  0.0  1.0  2.0   5.3  2016-17  \n","22  2.5  3.0  4.8  0.3  0.2  1.8  3.0   9.7  2016-17  \n","23  2.7  3.1  1.0  0.7  0.0  0.2  1.6   3.8  2016-17  \n","24  0.5  0.5  0.0  0.5  0.5  0.0  2.5   5.5  2016-17  \n","25  0.7  1.0  0.7  0.5  0.0  0.0  0.3   4.5  2016-17  \n","\n","[670 rows x 30 columns]\n"]}]},{"cell_type":"code","source":["# SCRAPE TEAM ROSTER STATS - 2016\n","# ** RUNTIME: ~1.5 MIN **\n","\n","team_roster_stats_2016 = pd.DataFrame()\n","\n","for team in team_codes:\n","  temp_df = get_roster_stats(team, 2016, data_format='PER_GAME', playoffs=False)\n","  temp_df['TEAM'] = team\n","  team_roster_stats_2016 = team_roster_stats_2016.append(temp_df)\n","\n","print(team_roster_stats_2016)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gq-PHgUPXBbQ","executionInfo":{"status":"ok","timestamp":1648838588650,"user_tz":240,"elapsed":84034,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"f9c4c08e-96fa-4d1b-9e74-2a03610ef881"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              PLAYER POS AGE TEAM   G  GS    MP   FG   FGA   FG%  ...  ORB  \\\n","0      Nicolas Batum  SF  27  CHO  70  70  35.0  5.3  12.5  .426  ...  0.8   \n","1       Troy Daniels  SG  24  CHO  43   0  11.1  2.1   4.3  .476  ...  0.2   \n","2   Jorge GutiÃ©rrez  PG  27  CHO  12   0   5.3  0.5   0.9  .545  ...  0.0   \n","3      P.J. Hairston  SF  23  CHO  48  43  19.5  2.1   5.8  .359  ...  0.4   \n","4   Tyler Hansbrough  PF  30  CHO  44   0   7.8  0.7   1.6  .451  ...  0.9   \n","..               ...  ..  ..  ...  ..  ..   ...  ...   ...   ...  ...  ...   \n","16      Jrue Holiday  PG  25  NOP  65  23  28.2  6.3  14.4  .439  ...  0.4   \n","17   Orlando Johnson  SG  26  NOP   5   1  10.8  0.8   3.4  .235  ...  0.2   \n","18  Kendrick Perkins   C  31  NOP  37   5  14.6  1.1   2.0  .533  ...  0.7   \n","19     Nate Robinson  PG  31  NOP   2   1  11.5  0.0   0.5  .000  ...  0.0   \n","20         Ish Smith  PG  27  NOP  27   3  22.9  3.6   8.4  .430  ...  0.5   \n","\n","    DRB  TRB  AST  STL  BLK  TOV   PF   PTS   SEASON  \n","0   5.3  6.1  5.8  0.9  0.6  2.9  1.6  14.9  2015-16  \n","1   1.2  1.3  0.5  0.3  0.1  0.6  0.9   5.6  2015-16  \n","2   0.6  0.6  1.4  0.3  0.0  0.5  0.3   1.8  2015-16  \n","3   2.3  2.7  0.6  0.5  0.1  0.5  2.2   6.0  2015-16  \n","4   1.1  2.0  0.2  0.3  0.2  0.3  1.3   2.4  2015-16  \n","..  ...  ...  ...  ...  ...  ...  ...   ...      ...  \n","16  2.6  3.0  6.0  1.4  0.3  2.6  2.3  16.8  2015-16  \n","17  1.0  1.2  0.4  0.2  0.0  0.6  0.8   2.0  2015-16  \n","18  2.8  3.5  0.8  0.3  0.3  1.1  1.7   2.5  2015-16  \n","19  0.0  0.0  2.0  0.5  0.0  0.0  2.5   0.0  2015-16  \n","20  2.9  3.4  5.7  0.9  0.2  1.7  1.4   8.9  2015-16  \n","\n","[649 rows x 30 columns]\n"]}]},{"cell_type":"code","source":["# SCRAPE TEAM ROSTER STATS - 2015\n","# ** RUNTIME: ~2.5 MIN **\n","\n","team_roster_stats_2015 = pd.DataFrame()\n","\n","for team in team_codes:\n","  temp_df = get_roster_stats(team, 2015, data_format='PER_GAME', playoffs=False)\n","  temp_df['TEAM'] = team\n","  team_roster_stats_2015 = team_roster_stats_2015.append(temp_df)\n","\n","print(team_roster_stats_2015)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IukgpaQRXBr9","executionInfo":{"status":"ok","timestamp":1648839288571,"user_tz":240,"elapsed":136859,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"2339b1c2-0a09-47cb-fe27-df6b0cdaab56"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              PLAYER POS AGE TEAM   G  GS    MP   FG   FGA   FG%  ...  ORB  \\\n","0    Bismack Biyombo   C  22  CHO  64  21  19.4  1.6   2.9  .543  ...  2.5   \n","1       Troy Daniels  SG  23  CHO  11   0  12.3  2.5   5.4  .458  ...  0.2   \n","2      P.J. Hairston  SG  22  CHO  45   2  15.3  1.9   6.0  .323  ...  0.5   \n","3   Gerald Henderson  SG  27  CHO  80  72  28.9  4.6  10.6  .437  ...  0.5   \n","4       Al Jefferson   C  30  CHO  65  61  30.6  7.5  15.5  .481  ...  1.5   \n","..               ...  ..  ..  ...  ..  ..   ...  ...   ...   ...  ...  ...   \n","16      John Salmons  SF  35  NOP  21   0  12.9  0.8   2.3  .333  ...  0.2   \n","17        Russ Smith  PG  23  NOP   6   0   4.8  0.3   1.7  .200  ...  0.0   \n","18   Elliot Williams  SG  25  NOP   8   0   9.6  1.0   3.0  .333  ...  0.0   \n","19       Jeff Withey   C  24  NOP  37   0   7.0  0.9   1.7  .500  ...  0.6   \n","20      Nate Wolters  PG  23  NOP  10   0  10.5  0.8   2.6  .308  ...  0.6   \n","\n","    DRB  TRB  AST  STL  BLK  TOV   PF   PTS   SEASON  \n","0   3.9  6.4  0.3  0.3  1.5  0.8  2.2   4.8  2014-15  \n","1   0.5  0.7  0.5  0.3  0.1  0.6  1.1   7.0  2014-15  \n","2   1.6  2.0  0.5  0.5  0.3  0.5  1.4   5.6  2014-15  \n","3   3.0  3.4  2.6  0.6  0.3  1.4  1.7  12.1  2014-15  \n","4   6.9  8.4  1.7  0.7  1.3  1.0  2.1  16.6  2014-15  \n","..  ...  ...  ...  ...  ...  ...  ...   ...      ...  \n","16  0.8  1.0  0.6  0.4  0.2  0.2  1.2   2.0  2014-15  \n","17  0.5  0.5  0.3  0.0  0.0  1.2  1.0   0.8  2014-15  \n","18  0.6  0.6  1.0  0.3  0.0  0.0  1.4   2.4  2014-15  \n","19  1.1  1.7  0.3  0.1  0.5  0.3  0.7   2.6  2014-15  \n","20  1.2  1.8  1.1  0.3  0.2  1.0  0.7   1.7  2014-15  \n","\n","[693 rows x 30 columns]\n"]}]},{"cell_type":"code","source":["# SCRAPE TEAM ROSTER STATS - 2014\n","# ** RUNTIME: ~2 MIN **\n","\n","team_roster_stats_2014 = pd.DataFrame()\n","\n","for team in team_codes:\n","  temp_df = get_roster_stats(team, 2014, data_format='PER_GAME', playoffs=False)\n","  temp_df['TEAM'] = team\n","  team_roster_stats_2014 = team_roster_stats_2014.append(temp_df)\n","\n","print(team_roster_stats_2014)"],"metadata":{"id":"FUAMX2FkXB7t"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# SCRAPE TEAM ROSTER STATS - 2013\n","# ** RUNTIME: ~2 MIN **\n","\n","team_roster_stats_2013 = pd.DataFrame()\n","\n","for team in team_codes:\n","  temp_df = get_roster_stats(team, 2013, data_format='PER_GAME', playoffs=False)\n","  temp_df['TEAM'] = team\n","  team_roster_stats_2013 = team_roster_stats_2013.append(temp_df)\n","\n","print(team_roster_stats_2013)"],"metadata":{"id":"5NhEvd_DXN6u"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# SCRAPE TEAM ROSTER STATS - 2012\n","# ** RUNTIME: ~2 MIN **\n","\n","team_roster_stats_2012 = pd.DataFrame()\n","\n","for team in team_codes:\n","  temp_df = get_roster_stats(team, 2012, data_format='PER_GAME', playoffs=False)\n","  temp_df['TEAM'] = team\n","  team_roster_stats_2012 = team_roster_stats_2012.append(temp_df)\n","\n","print(team_roster_stats_2012)"],"metadata":{"id":"rQPR_KUdXNy8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# SCRAPE TEAM ROSTER STATS - 2011\n","# ** RUNTIME: ~2 MIN **\n","\n","team_roster_stats_2011 = pd.DataFrame()\n","\n","for team in team_codes:\n","  temp_df = get_roster_stats(team, 2011, data_format='PER_GAME', playoffs=False)\n","  temp_df['TEAM'] = team\n","  team_roster_stats_2011 = team_roster_stats_2011.append(temp_df)\n","\n","print(team_roster_stats_2011)"],"metadata":{"id":"vdBPsksGXCOQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# SCRAPE TEAM ROSTER STATS - 2010\n","# ** RUNTIME: ~2 MIN **\n","\n","team_roster_stats_2010 = pd.DataFrame()\n","\n","for team in team_codes:\n","  temp_df = get_roster_stats(team, 2010, data_format='PER_GAME', playoffs=False)\n","  temp_df['TEAM'] = team\n","  team_roster_stats_2010 = team_roster_stats_2010.append(temp_df)\n","\n","print(team_roster_stats_2010)"],"metadata":{"id":"4bQdZiJoXcKr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"RChPmKcIXcWH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["team_roster_stats_2015_2022 = pd.concat([team_roster_stats_2020, team_roster_stats_2019, team_roster_stats_2018, team_roster_stats_2017, team_roster_stats_2016, team_roster_stats_2015])\n","#team_roster_stats_2015_2022 = pd.merge(team_roster_stats_2022, team_roster_stats_2021) #, left_index=True # axis=0 , on = 'PLAYER'\n","\n","#team_roster_stats_2020, team_roster_stats_2019, team_roster_stats_2018, team_roster_stats_2017, team_roster_stats_2016, team_roster_stats_2015,\n","team_roster_stats_2015_2022"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"3UYwSkpBHv3d","executionInfo":{"status":"ok","timestamp":1648840309927,"user_tz":240,"elapsed":150,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"26264c8e-c36d-42f9-da6b-0fbf9c9ad819"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             PLAYER POS AGE TEAM   G  GS    MP   FG   FGA   FG%  ...  ORB  \\\n","0      Dwayne Bacon  SG  24  CHO  39  11  17.6  2.2   6.3  .348  ...  0.4   \n","1     Nicolas Batum  SF  31  CHO  22   3  23.0  1.3   3.7  .346  ...  1.1   \n","2   Bismack Biyombo   C  27  CHO  53  29  19.4  2.8   5.2  .543  ...  2.3   \n","3     Miles Bridges  SF  21  CHO  65  64  30.7  4.9  11.6  .424  ...  1.4   \n","4       Joe Chealey  PG  24  CHO   4   0   8.3  0.0   1.8  .000  ...  0.0   \n","..              ...  ..  ..  ...  ..  ..   ...  ...   ...   ...  ...  ...   \n","16     John Salmons  SF  35  NOP  21   0  12.9  0.8   2.3  .333  ...  0.2   \n","17       Russ Smith  PG  23  NOP   6   0   4.8  0.3   1.7  .200  ...  0.0   \n","18  Elliot Williams  SG  25  NOP   8   0   9.6  1.0   3.0  .333  ...  0.0   \n","19      Jeff Withey   C  24  NOP  37   0   7.0  0.9   1.7  .500  ...  0.6   \n","20     Nate Wolters  PG  23  NOP  10   0  10.5  0.8   2.6  .308  ...  0.6   \n","\n","    DRB  TRB  AST  STL  BLK  TOV   PF   PTS   SEASON  \n","0   2.2  2.6  1.3  0.6  0.1  0.9  1.3   5.7  2019-20  \n","1   3.4  4.5  3.0  0.8  0.4  1.0  1.9   3.6  2019-20  \n","2   3.5  5.8  0.9  0.2  0.9  0.9  2.2   7.4  2019-20  \n","3   4.2  5.6  1.8  0.6  0.7  1.5  2.0  13.0  2019-20  \n","4   0.0  0.0  0.3  1.0  0.0  0.5  0.5   0.5  2019-20  \n","..  ...  ...  ...  ...  ...  ...  ...   ...      ...  \n","16  0.8  1.0  0.6  0.4  0.2  0.2  1.2   2.0  2014-15  \n","17  0.5  0.5  0.3  0.0  0.0  1.2  1.0   0.8  2014-15  \n","18  0.6  0.6  1.0  0.3  0.0  0.0  1.4   2.4  2014-15  \n","19  1.1  1.7  0.3  0.1  0.5  0.3  0.7   2.6  2014-15  \n","20  1.2  1.8  1.1  0.3  0.2  1.0  0.7   1.7  2014-15  \n","\n","[4191 rows x 30 columns]"],"text/html":["\n","  <div id=\"df-85151149-1cce-4302-88cf-90f83d2c62a1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PLAYER</th>\n","      <th>POS</th>\n","      <th>AGE</th>\n","      <th>TEAM</th>\n","      <th>G</th>\n","      <th>GS</th>\n","      <th>MP</th>\n","      <th>FG</th>\n","      <th>FGA</th>\n","      <th>FG%</th>\n","      <th>...</th>\n","      <th>ORB</th>\n","      <th>DRB</th>\n","      <th>TRB</th>\n","      <th>AST</th>\n","      <th>STL</th>\n","      <th>BLK</th>\n","      <th>TOV</th>\n","      <th>PF</th>\n","      <th>PTS</th>\n","      <th>SEASON</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Dwayne Bacon</td>\n","      <td>SG</td>\n","      <td>24</td>\n","      <td>CHO</td>\n","      <td>39</td>\n","      <td>11</td>\n","      <td>17.6</td>\n","      <td>2.2</td>\n","      <td>6.3</td>\n","      <td>.348</td>\n","      <td>...</td>\n","      <td>0.4</td>\n","      <td>2.2</td>\n","      <td>2.6</td>\n","      <td>1.3</td>\n","      <td>0.6</td>\n","      <td>0.1</td>\n","      <td>0.9</td>\n","      <td>1.3</td>\n","      <td>5.7</td>\n","      <td>2019-20</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Nicolas Batum</td>\n","      <td>SF</td>\n","      <td>31</td>\n","      <td>CHO</td>\n","      <td>22</td>\n","      <td>3</td>\n","      <td>23.0</td>\n","      <td>1.3</td>\n","      <td>3.7</td>\n","      <td>.346</td>\n","      <td>...</td>\n","      <td>1.1</td>\n","      <td>3.4</td>\n","      <td>4.5</td>\n","      <td>3.0</td>\n","      <td>0.8</td>\n","      <td>0.4</td>\n","      <td>1.0</td>\n","      <td>1.9</td>\n","      <td>3.6</td>\n","      <td>2019-20</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Bismack Biyombo</td>\n","      <td>C</td>\n","      <td>27</td>\n","      <td>CHO</td>\n","      <td>53</td>\n","      <td>29</td>\n","      <td>19.4</td>\n","      <td>2.8</td>\n","      <td>5.2</td>\n","      <td>.543</td>\n","      <td>...</td>\n","      <td>2.3</td>\n","      <td>3.5</td>\n","      <td>5.8</td>\n","      <td>0.9</td>\n","      <td>0.2</td>\n","      <td>0.9</td>\n","      <td>0.9</td>\n","      <td>2.2</td>\n","      <td>7.4</td>\n","      <td>2019-20</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Miles Bridges</td>\n","      <td>SF</td>\n","      <td>21</td>\n","      <td>CHO</td>\n","      <td>65</td>\n","      <td>64</td>\n","      <td>30.7</td>\n","      <td>4.9</td>\n","      <td>11.6</td>\n","      <td>.424</td>\n","      <td>...</td>\n","      <td>1.4</td>\n","      <td>4.2</td>\n","      <td>5.6</td>\n","      <td>1.8</td>\n","      <td>0.6</td>\n","      <td>0.7</td>\n","      <td>1.5</td>\n","      <td>2.0</td>\n","      <td>13.0</td>\n","      <td>2019-20</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Joe Chealey</td>\n","      <td>PG</td>\n","      <td>24</td>\n","      <td>CHO</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>8.3</td>\n","      <td>0.0</td>\n","      <td>1.8</td>\n","      <td>.000</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.3</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.5</td>\n","      <td>0.5</td>\n","      <td>0.5</td>\n","      <td>2019-20</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>John Salmons</td>\n","      <td>SF</td>\n","      <td>35</td>\n","      <td>NOP</td>\n","      <td>21</td>\n","      <td>0</td>\n","      <td>12.9</td>\n","      <td>0.8</td>\n","      <td>2.3</td>\n","      <td>.333</td>\n","      <td>...</td>\n","      <td>0.2</td>\n","      <td>0.8</td>\n","      <td>1.0</td>\n","      <td>0.6</td>\n","      <td>0.4</td>\n","      <td>0.2</td>\n","      <td>0.2</td>\n","      <td>1.2</td>\n","      <td>2.0</td>\n","      <td>2014-15</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>Russ Smith</td>\n","      <td>PG</td>\n","      <td>23</td>\n","      <td>NOP</td>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>4.8</td>\n","      <td>0.3</td>\n","      <td>1.7</td>\n","      <td>.200</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.5</td>\n","      <td>0.5</td>\n","      <td>0.3</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.2</td>\n","      <td>1.0</td>\n","      <td>0.8</td>\n","      <td>2014-15</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>Elliot Williams</td>\n","      <td>SG</td>\n","      <td>25</td>\n","      <td>NOP</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>9.6</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>.333</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.6</td>\n","      <td>0.6</td>\n","      <td>1.0</td>\n","      <td>0.3</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.4</td>\n","      <td>2.4</td>\n","      <td>2014-15</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>Jeff Withey</td>\n","      <td>C</td>\n","      <td>24</td>\n","      <td>NOP</td>\n","      <td>37</td>\n","      <td>0</td>\n","      <td>7.0</td>\n","      <td>0.9</td>\n","      <td>1.7</td>\n","      <td>.500</td>\n","      <td>...</td>\n","      <td>0.6</td>\n","      <td>1.1</td>\n","      <td>1.7</td>\n","      <td>0.3</td>\n","      <td>0.1</td>\n","      <td>0.5</td>\n","      <td>0.3</td>\n","      <td>0.7</td>\n","      <td>2.6</td>\n","      <td>2014-15</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>Nate Wolters</td>\n","      <td>PG</td>\n","      <td>23</td>\n","      <td>NOP</td>\n","      <td>10</td>\n","      <td>0</td>\n","      <td>10.5</td>\n","      <td>0.8</td>\n","      <td>2.6</td>\n","      <td>.308</td>\n","      <td>...</td>\n","      <td>0.6</td>\n","      <td>1.2</td>\n","      <td>1.8</td>\n","      <td>1.1</td>\n","      <td>0.3</td>\n","      <td>0.2</td>\n","      <td>1.0</td>\n","      <td>0.7</td>\n","      <td>1.7</td>\n","      <td>2014-15</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4191 rows × 30 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-85151149-1cce-4302-88cf-90f83d2c62a1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-85151149-1cce-4302-88cf-90f83d2c62a1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-85151149-1cce-4302-88cf-90f83d2c62a1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["player_info = pd.merge(team_rosters, team_roster_stats) #, left_index=True # axis=0 , on = 'PLAYER'\n","#player_info.info()\n","player_info[:25]"],"metadata":{"id":"DgsjWFo2Nkuc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#team_roster_stats.info()\n","#player_info.describe()\n","#team_roster_stats.info()\n","team_rosters.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4P8co6IbNMwy","executionInfo":{"status":"ok","timestamp":1648668428791,"user_tz":240,"elapsed":152,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"a63d6f01-4355-4d73-b579-a0fbe525f9f0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['NUMBER', 'PLAYER', 'POS', 'HEIGHT', 'WEIGHT', 'BIRTH_DATE',\n","       'NATIONALITY', 'EXPERIENCE', 'COLLEGE', 'TEAM'],\n","      dtype='object')"]},"metadata":{},"execution_count":135}]},{"cell_type":"code","source":[""],"metadata":{"id":"6H-DE30sYwCb"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### DATA EXPORT"],"metadata":{"id":"TsCKLDn9YwSS"}},{"cell_type":"code","source":["matchup_filepath = 'drive/My Drive/GWU/TEAM-7/data/team_roster_stats_2015_2022'"],"metadata":{"id":"-ysns_MQYwSS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["team_roster_stats_2015_2022.to_excel(matchup_filepath + '.xlsx', index=False)\n","team_roster_stats_2015_2022.to_csv(matchup_filepath + '.csv', index=False)"],"metadata":{"id":"_XZEauOQYwST"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### DATA IMPORT"],"metadata":{"id":"tlXrRFIoY0CL"}},{"cell_type":"code","source":["historical_roster_stats = pd.read_excel(matchup_filepath + '.xlsx', index_col='PLAYER')\n","#matchup_history = pd.read_csv(matchup_filepath + '.csv', index_col='DATE')\n","historical_roster_stats"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":692},"id":"utv0LhImY0CM","executionInfo":{"status":"ok","timestamp":1649194251248,"user_tz":240,"elapsed":4116,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"865c8c3b-afaa-4c23-eaf4-4a9ab460e309"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                POS  AGE TEAM   G  GS    MP   FG   FGA    FG%   3P  ...  ORB  \\\n","PLAYER                                                              ...        \n","Dwayne Bacon     SG   24  CHO  39  11  17.6  2.2   6.3  0.348  0.5  ...  0.4   \n","Nicolas Batum    SF   31  CHO  22   3  23.0  1.3   3.7  0.346  0.6  ...  1.1   \n","Bismack Biyombo   C   27  CHO  53  29  19.4  2.8   5.2  0.543  0.0  ...  2.3   \n","Miles Bridges    SF   21  CHO  65  64  30.7  4.9  11.6  0.424  1.5  ...  1.4   \n","Joe Chealey      PG   24  CHO   4   0   8.3  0.0   1.8  0.000  0.0  ...  0.0   \n","...              ..  ...  ...  ..  ..   ...  ...   ...    ...  ...  ...  ...   \n","John Salmons     SF   35  NOP  21   0  12.9  0.8   2.3  0.333  0.4  ...  0.2   \n","Russ Smith       PG   23  NOP   6   0   4.8  0.3   1.7  0.200  0.2  ...  0.0   \n","Elliot Williams  SG   25  NOP   8   0   9.6  1.0   3.0  0.333  0.4  ...  0.0   \n","Jeff Withey       C   24  NOP  37   0   7.0  0.9   1.7  0.500  0.0  ...  0.6   \n","Nate Wolters     PG   23  NOP  10   0  10.5  0.8   2.6  0.308  0.0  ...  0.6   \n","\n","                 DRB  TRB  AST  STL  BLK  TOV   PF   PTS   SEASON  \n","PLAYER                                                             \n","Dwayne Bacon     2.2  2.6  1.3  0.6  0.1  0.9  1.3   5.7  2019-20  \n","Nicolas Batum    3.4  4.5  3.0  0.8  0.4  1.0  1.9   3.6  2019-20  \n","Bismack Biyombo  3.5  5.8  0.9  0.2  0.9  0.9  2.2   7.4  2019-20  \n","Miles Bridges    4.2  5.6  1.8  0.6  0.7  1.5  2.0  13.0  2019-20  \n","Joe Chealey      0.0  0.0  0.3  1.0  0.0  0.5  0.5   0.5  2019-20  \n","...              ...  ...  ...  ...  ...  ...  ...   ...      ...  \n","John Salmons     0.8  1.0  0.6  0.4  0.2  0.2  1.2   2.0  2014-15  \n","Russ Smith       0.5  0.5  0.3  0.0  0.0  1.2  1.0   0.8  2014-15  \n","Elliot Williams  0.6  0.6  1.0  0.3  0.0  0.0  1.4   2.4  2014-15  \n","Jeff Withey      1.1  1.7  0.3  0.1  0.5  0.3  0.7   2.6  2014-15  \n","Nate Wolters     1.2  1.8  1.1  0.3  0.2  1.0  0.7   1.7  2014-15  \n","\n","[4191 rows x 29 columns]"],"text/html":["\n","  <div id=\"df-85ad00c3-3fbd-4b38-ba38-14f1eb32d826\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>POS</th>\n","      <th>AGE</th>\n","      <th>TEAM</th>\n","      <th>G</th>\n","      <th>GS</th>\n","      <th>MP</th>\n","      <th>FG</th>\n","      <th>FGA</th>\n","      <th>FG%</th>\n","      <th>3P</th>\n","      <th>...</th>\n","      <th>ORB</th>\n","      <th>DRB</th>\n","      <th>TRB</th>\n","      <th>AST</th>\n","      <th>STL</th>\n","      <th>BLK</th>\n","      <th>TOV</th>\n","      <th>PF</th>\n","      <th>PTS</th>\n","      <th>SEASON</th>\n","    </tr>\n","    <tr>\n","      <th>PLAYER</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Dwayne Bacon</th>\n","      <td>SG</td>\n","      <td>24</td>\n","      <td>CHO</td>\n","      <td>39</td>\n","      <td>11</td>\n","      <td>17.6</td>\n","      <td>2.2</td>\n","      <td>6.3</td>\n","      <td>0.348</td>\n","      <td>0.5</td>\n","      <td>...</td>\n","      <td>0.4</td>\n","      <td>2.2</td>\n","      <td>2.6</td>\n","      <td>1.3</td>\n","      <td>0.6</td>\n","      <td>0.1</td>\n","      <td>0.9</td>\n","      <td>1.3</td>\n","      <td>5.7</td>\n","      <td>2019-20</td>\n","    </tr>\n","    <tr>\n","      <th>Nicolas Batum</th>\n","      <td>SF</td>\n","      <td>31</td>\n","      <td>CHO</td>\n","      <td>22</td>\n","      <td>3</td>\n","      <td>23.0</td>\n","      <td>1.3</td>\n","      <td>3.7</td>\n","      <td>0.346</td>\n","      <td>0.6</td>\n","      <td>...</td>\n","      <td>1.1</td>\n","      <td>3.4</td>\n","      <td>4.5</td>\n","      <td>3.0</td>\n","      <td>0.8</td>\n","      <td>0.4</td>\n","      <td>1.0</td>\n","      <td>1.9</td>\n","      <td>3.6</td>\n","      <td>2019-20</td>\n","    </tr>\n","    <tr>\n","      <th>Bismack Biyombo</th>\n","      <td>C</td>\n","      <td>27</td>\n","      <td>CHO</td>\n","      <td>53</td>\n","      <td>29</td>\n","      <td>19.4</td>\n","      <td>2.8</td>\n","      <td>5.2</td>\n","      <td>0.543</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>2.3</td>\n","      <td>3.5</td>\n","      <td>5.8</td>\n","      <td>0.9</td>\n","      <td>0.2</td>\n","      <td>0.9</td>\n","      <td>0.9</td>\n","      <td>2.2</td>\n","      <td>7.4</td>\n","      <td>2019-20</td>\n","    </tr>\n","    <tr>\n","      <th>Miles Bridges</th>\n","      <td>SF</td>\n","      <td>21</td>\n","      <td>CHO</td>\n","      <td>65</td>\n","      <td>64</td>\n","      <td>30.7</td>\n","      <td>4.9</td>\n","      <td>11.6</td>\n","      <td>0.424</td>\n","      <td>1.5</td>\n","      <td>...</td>\n","      <td>1.4</td>\n","      <td>4.2</td>\n","      <td>5.6</td>\n","      <td>1.8</td>\n","      <td>0.6</td>\n","      <td>0.7</td>\n","      <td>1.5</td>\n","      <td>2.0</td>\n","      <td>13.0</td>\n","      <td>2019-20</td>\n","    </tr>\n","    <tr>\n","      <th>Joe Chealey</th>\n","      <td>PG</td>\n","      <td>24</td>\n","      <td>CHO</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>8.3</td>\n","      <td>0.0</td>\n","      <td>1.8</td>\n","      <td>0.000</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.3</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.5</td>\n","      <td>0.5</td>\n","      <td>0.5</td>\n","      <td>2019-20</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>John Salmons</th>\n","      <td>SF</td>\n","      <td>35</td>\n","      <td>NOP</td>\n","      <td>21</td>\n","      <td>0</td>\n","      <td>12.9</td>\n","      <td>0.8</td>\n","      <td>2.3</td>\n","      <td>0.333</td>\n","      <td>0.4</td>\n","      <td>...</td>\n","      <td>0.2</td>\n","      <td>0.8</td>\n","      <td>1.0</td>\n","      <td>0.6</td>\n","      <td>0.4</td>\n","      <td>0.2</td>\n","      <td>0.2</td>\n","      <td>1.2</td>\n","      <td>2.0</td>\n","      <td>2014-15</td>\n","    </tr>\n","    <tr>\n","      <th>Russ Smith</th>\n","      <td>PG</td>\n","      <td>23</td>\n","      <td>NOP</td>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>4.8</td>\n","      <td>0.3</td>\n","      <td>1.7</td>\n","      <td>0.200</td>\n","      <td>0.2</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.5</td>\n","      <td>0.5</td>\n","      <td>0.3</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.2</td>\n","      <td>1.0</td>\n","      <td>0.8</td>\n","      <td>2014-15</td>\n","    </tr>\n","    <tr>\n","      <th>Elliot Williams</th>\n","      <td>SG</td>\n","      <td>25</td>\n","      <td>NOP</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>9.6</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>0.333</td>\n","      <td>0.4</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.6</td>\n","      <td>0.6</td>\n","      <td>1.0</td>\n","      <td>0.3</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.4</td>\n","      <td>2.4</td>\n","      <td>2014-15</td>\n","    </tr>\n","    <tr>\n","      <th>Jeff Withey</th>\n","      <td>C</td>\n","      <td>24</td>\n","      <td>NOP</td>\n","      <td>37</td>\n","      <td>0</td>\n","      <td>7.0</td>\n","      <td>0.9</td>\n","      <td>1.7</td>\n","      <td>0.500</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.6</td>\n","      <td>1.1</td>\n","      <td>1.7</td>\n","      <td>0.3</td>\n","      <td>0.1</td>\n","      <td>0.5</td>\n","      <td>0.3</td>\n","      <td>0.7</td>\n","      <td>2.6</td>\n","      <td>2014-15</td>\n","    </tr>\n","    <tr>\n","      <th>Nate Wolters</th>\n","      <td>PG</td>\n","      <td>23</td>\n","      <td>NOP</td>\n","      <td>10</td>\n","      <td>0</td>\n","      <td>10.5</td>\n","      <td>0.8</td>\n","      <td>2.6</td>\n","      <td>0.308</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.6</td>\n","      <td>1.2</td>\n","      <td>1.8</td>\n","      <td>1.1</td>\n","      <td>0.3</td>\n","      <td>0.2</td>\n","      <td>1.0</td>\n","      <td>0.7</td>\n","      <td>1.7</td>\n","      <td>2014-15</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4191 rows × 29 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-85ad00c3-3fbd-4b38-ba38-14f1eb32d826')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-85ad00c3-3fbd-4b38-ba38-14f1eb32d826 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-85ad00c3-3fbd-4b38-ba38-14f1eb32d826');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["historical_roster_stats.dropna(inplace=True)\n","historical_roster_stats.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gjb_qkyNoaRs","executionInfo":{"status":"ok","timestamp":1649195267945,"user_tz":240,"elapsed":133,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"de2cd948-10b4-4b8d-fb4f-eba08162c798"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 3630 entries, Dwayne Bacon to Nate Wolters\n","Data columns (total 29 columns):\n"," #   Column  Non-Null Count  Dtype  \n","---  ------  --------------  -----  \n"," 0   POS     3630 non-null   object \n"," 1   AGE     3630 non-null   int64  \n"," 2   TEAM    3630 non-null   object \n"," 3   G       3630 non-null   int64  \n"," 4   GS      3630 non-null   int64  \n"," 5   MP      3630 non-null   float64\n"," 6   FG      3630 non-null   float64\n"," 7   FGA     3630 non-null   float64\n"," 8   FG%     3630 non-null   float64\n"," 9   3P      3630 non-null   float64\n"," 10  3PA     3630 non-null   float64\n"," 11  3P%     3630 non-null   float64\n"," 12  2P      3630 non-null   float64\n"," 13  2PA     3630 non-null   float64\n"," 14  2P%     3630 non-null   float64\n"," 15  eFG%    3630 non-null   float64\n"," 16  FT      3630 non-null   float64\n"," 17  FTA     3630 non-null   float64\n"," 18  FT%     3630 non-null   float64\n"," 19  ORB     3630 non-null   float64\n"," 20  DRB     3630 non-null   float64\n"," 21  TRB     3630 non-null   float64\n"," 22  AST     3630 non-null   float64\n"," 23  STL     3630 non-null   float64\n"," 24  BLK     3630 non-null   float64\n"," 25  TOV     3630 non-null   float64\n"," 26  PF      3630 non-null   float64\n"," 27  PTS     3630 non-null   float64\n"," 28  SEASON  3630 non-null   object \n","dtypes: float64(23), int64(3), object(3)\n","memory usage: 850.8+ KB\n"]}]},{"cell_type":"code","source":["def wtd_avg(df, values, weights):\n","  return sum(df[weights] * df[values]) / df[weights].sum()\n","\n","hist_eFG_pct = historical_roster_stats.groupby(by = ['TEAM', 'SEASON']).apply(wtd_avg, 'eFG%', 'MP')\n","hist_3P_pct = historical_roster_stats.groupby(by = ['TEAM', 'SEASON']).apply(wtd_avg, '3P%', 'MP')\n","hist_2P_pct = historical_roster_stats.groupby(by = ['TEAM', 'SEASON']).apply(wtd_avg, '2P%', 'MP')\n","hist_FT_pct = historical_roster_stats.groupby(by = ['TEAM', 'SEASON']).apply(wtd_avg, 'FT%', 'MP')\n","\n","\n","three_point_attempts = historical_roster_stats.groupby(by = ['TEAM', 'SEASON']).apply(wtd_avg, '3PA', 'MP')\n","two_point_attempts = historical_roster_stats.groupby(by = ['TEAM', 'SEASON']).apply(wtd_avg, '2PA', 'MP')\n","#team_wtd_avg = pd.DataFrame(data=[three_point_attempts, two_point_attempts], columns=)\n","team_wtd_avg = pd.DataFrame(data=[hist_eFG_pct, hist_3P_pct, hist_2P_pct, hist_FT_pct], index=['eFG%', '3P%', '2P%', 'FT%']).T\n","team_wtd_avg"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":293},"id":"r_L5VpCaeEam","executionInfo":{"status":"error","timestamp":1649215611219,"user_tz":240,"elapsed":228,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"9916da88-2a7c-4048-e4c2-b8ad33d3169e"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-4594dc92d38e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mweights\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mweights\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mhist_eFG_pct\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhistorical_roster_stats\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mby\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'TEAM'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'SEASON'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwtd_avg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'eFG%'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'MP'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mhist_3P_pct\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhistorical_roster_stats\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mby\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'TEAM'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'SEASON'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwtd_avg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'3P%'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'MP'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mhist_2P_pct\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhistorical_roster_stats\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mby\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'TEAM'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'SEASON'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwtd_avg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'2P%'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'MP'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'historical_roster_stats' is not defined"]}]},{"cell_type":"code","source":["\n","roster_num_cols = ['AGE','G', 'GS', 'MP', 'FG', 'FGA', 'FG%',\n","                   '3P', '3PA', '3P%', '2P', '2PA', '2P%', 'eFG%', 'FT', 'FTA', 'FT%',\n","                   'ORB', 'DRB', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'PF', 'PTS'] #, 'HEIGHT', 'WEIGHT', 'EXPERIENCE'\n","\n","def wtd_avg(df, values, weights):\n","    return sum(df[weights] * df[values]) / df[weights].sum()\n","#print(wtd_avg(historical_roster_stats, 'Grades', 'MP'))\n","\n","for col in historical_roster_stats.columns:\n","  test2 = historical_roster_stats.groupby(by = ['TEAM', 'SEASON']).apply(wtd_avg, col, 'MP')\n","  team_wtd_avg[col] = .apply(wtd_avg, col, 'MP')\n","\n","print(test2)"],"metadata":{"id":"s9tlMxpwibvP"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### DATA VIZ"],"metadata":{"id":"BU-n_AAPV8vQ"}},{"cell_type":"code","source":["roster_num_cols = ['AGE','G', 'GS', 'MP', 'FG', 'FGA', 'FG%',\n","                   '3P', '3PA', '3P%', '2P', '2PA', '2P%', 'eFG%', 'FT', 'FTA', 'FT%',\n","                   'ORB', 'DRB', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'PF', 'PTS'] #, 'HEIGHT', 'WEIGHT', 'EXPERIENCE'"],"metadata":{"id":"4RfjscbYS00-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# EJECT OR IMPUTE MISSING VALUES:\n","  # FG%\n","  # 3P%\n","  # 2P%\n","  # eFG%\n","  # FT%"],"metadata":{"id":"ucJA9VJpoO6t"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# CAST DATA AS NUMERIC FLOATS\n","player_info[roster_num_cols] = player_info[roster_num_cols].apply(lambda x: x.astype(float))\n","print(player_info.info())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bF83dPTqTgnD","executionInfo":{"status":"ok","timestamp":1648669291761,"user_tz":240,"elapsed":151,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"37e358a1-85fa-4ca1-de9f-fe33f4d0d8ae"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 595 entries, 0 to 731\n","Data columns (total 37 columns):\n"," #   Column       Non-Null Count  Dtype         \n","---  ------       --------------  -----         \n"," 0   NUMBER       595 non-null    object        \n"," 1   PLAYER       595 non-null    object        \n"," 2   POS          595 non-null    object        \n"," 3   HEIGHT       595 non-null    object        \n"," 4   WEIGHT       595 non-null    int64         \n"," 5   BIRTH_DATE   595 non-null    datetime64[ns]\n"," 6   NATIONALITY  595 non-null    object        \n"," 7   EXPERIENCE   595 non-null    object        \n"," 8   COLLEGE      595 non-null    object        \n"," 9   TEAM         595 non-null    object        \n"," 10  AGE          595 non-null    float64       \n"," 11  G            595 non-null    float64       \n"," 12  GS           595 non-null    float64       \n"," 13  MP           595 non-null    float64       \n"," 14  FG           595 non-null    float64       \n"," 15  FGA          595 non-null    float64       \n"," 16  FG%          595 non-null    float64       \n"," 17  3P           595 non-null    float64       \n"," 18  3PA          595 non-null    float64       \n"," 19  3P%          595 non-null    float64       \n"," 20  2P           595 non-null    float64       \n"," 21  2PA          595 non-null    float64       \n"," 22  2P%          595 non-null    float64       \n"," 23  eFG%         595 non-null    float64       \n"," 24  FT           595 non-null    float64       \n"," 25  FTA          595 non-null    float64       \n"," 26  FT%          595 non-null    float64       \n"," 27  ORB          595 non-null    float64       \n"," 28  DRB          595 non-null    float64       \n"," 29  TRB          595 non-null    float64       \n"," 30  AST          595 non-null    float64       \n"," 31  STL          595 non-null    float64       \n"," 32  BLK          595 non-null    float64       \n"," 33  TOV          595 non-null    float64       \n"," 34  PF           595 non-null    float64       \n"," 35  PTS          595 non-null    float64       \n"," 36  SEASON       595 non-null    object        \n","dtypes: datetime64[ns](1), float64(26), int64(1), object(9)\n","memory usage: 176.6+ KB\n","None\n"]}]},{"cell_type":"code","source":["player_info.dropna(inplace=True)\n","player_info.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iAbZE00FVXQx","executionInfo":{"status":"ok","timestamp":1648669274222,"user_tz":240,"elapsed":150,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"4a90d3a4-aa38-43a7-f05c-6608d596e8be"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 595 entries, 0 to 731\n","Data columns (total 37 columns):\n"," #   Column       Non-Null Count  Dtype         \n","---  ------       --------------  -----         \n"," 0   NUMBER       595 non-null    object        \n"," 1   PLAYER       595 non-null    object        \n"," 2   POS          595 non-null    object        \n"," 3   HEIGHT       595 non-null    object        \n"," 4   WEIGHT       595 non-null    int64         \n"," 5   BIRTH_DATE   595 non-null    datetime64[ns]\n"," 6   NATIONALITY  595 non-null    object        \n"," 7   EXPERIENCE   595 non-null    object        \n"," 8   COLLEGE      595 non-null    object        \n"," 9   TEAM         595 non-null    object        \n"," 10  AGE          595 non-null    float64       \n"," 11  G            595 non-null    float64       \n"," 12  GS           595 non-null    float64       \n"," 13  MP           595 non-null    float64       \n"," 14  FG           595 non-null    float64       \n"," 15  FGA          595 non-null    float64       \n"," 16  FG%          595 non-null    float64       \n"," 17  3P           595 non-null    float64       \n"," 18  3PA          595 non-null    float64       \n"," 19  3P%          595 non-null    float64       \n"," 20  2P           595 non-null    float64       \n"," 21  2PA          595 non-null    float64       \n"," 22  2P%          595 non-null    float64       \n"," 23  eFG%         595 non-null    float64       \n"," 24  FT           595 non-null    float64       \n"," 25  FTA          595 non-null    float64       \n"," 26  FT%          595 non-null    float64       \n"," 27  ORB          595 non-null    float64       \n"," 28  DRB          595 non-null    float64       \n"," 29  TRB          595 non-null    float64       \n"," 30  AST          595 non-null    float64       \n"," 31  STL          595 non-null    float64       \n"," 32  BLK          595 non-null    float64       \n"," 33  TOV          595 non-null    float64       \n"," 34  PF           595 non-null    float64       \n"," 35  PTS          595 non-null    float64       \n"," 36  SEASON       595 non-null    object        \n","dtypes: datetime64[ns](1), float64(26), int64(1), object(9)\n","memory usage: 176.6+ KB\n"]}]},{"cell_type":"code","source":["college_mean = player_info.groupby(by=['COLLEGE']).mean()\n","college_sum = player_info.groupby(by=['COLLEGE']).sum()\n","\n","college_mean.describe()"],"metadata":{"id":"DcwttM1ZHLyf","colab":{"base_uri":"https://localhost:8080/","height":394},"executionInfo":{"status":"ok","timestamp":1648671079408,"user_tz":240,"elapsed":379,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"cc8b997f-13db-4f87-ff9b-98ac2f72b90e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           WEIGHT         AGE           G          GS          MP          FG  \\\n","count  129.000000  129.000000  129.000000  129.000000  129.000000  129.000000   \n","mean   213.596789   26.359965   45.949123   21.004879   21.522251    3.523579   \n","std     16.874279    3.228065   17.277616   18.852047    7.071728    1.833626   \n","min    173.000000   20.000000    2.000000    0.000000    7.300000    0.500000   \n","25%    205.000000   24.000000   36.800000    4.000000   16.700000    2.200000   \n","50%    212.500000   25.533333   48.000000   17.000000   23.150000    3.400000   \n","75%    221.000000   29.000000   59.000000   32.750000   26.300000    4.391667   \n","max    270.000000   36.000000   73.000000   72.000000   37.700000   10.200000   \n","\n","              FGA         FG%          3P         3PA  ...         FT%  \\\n","count  129.000000  129.000000  129.000000  129.000000  ...  129.000000   \n","mean     7.761215    0.454278    1.171585    3.312108  ...    0.755723   \n","std      4.043670    0.066447    0.815925    2.142151  ...    0.107859   \n","min      1.600000    0.265000    0.000000    0.000000  ...    0.400000   \n","25%      4.900000    0.416500    0.618182    1.900000  ...    0.706000   \n","50%      6.919048    0.451692    1.000000    2.925000  ...    0.771000   \n","75%      9.610000    0.484800    1.600000    4.400000  ...    0.827600   \n","max     21.300000    0.660000    4.500000   11.700000  ...    1.000000   \n","\n","              ORB         DRB         TRB         AST         STL         BLK  \\\n","count  129.000000  129.000000  129.000000  129.000000  129.000000  129.000000   \n","mean     0.851037    2.824175    3.675486    2.107043    0.703460    0.398961   \n","std      0.579210    1.180966    1.551954    1.450136    0.342085    0.280724   \n","min      0.100000    0.600000    0.800000    0.100000    0.000000    0.000000   \n","25%      0.500000    1.940000    2.673333    1.000000    0.500000    0.200000   \n","50%      0.800000    2.681818    3.400000    1.750000    0.700000    0.366667   \n","75%      1.050000    3.542857    4.600000    2.900000    0.910000    0.500000   \n","max      4.700000    6.500000   10.000000    7.300000    2.100000    2.000000   \n","\n","              TOV          PF         PTS  \n","count  129.000000  129.000000  129.000000  \n","mean     1.082913    1.771856    9.575826  \n","std      0.674124    0.515029    5.087857  \n","min      0.100000    0.200000    1.600000  \n","25%      0.600000    1.413333    5.700000  \n","50%      1.023077    1.800000    9.245455  \n","75%      1.300000    2.100000   11.700000  \n","max      4.100000    3.400000   25.900000  \n","\n","[8 rows x 27 columns]"],"text/html":["\n","  <div id=\"df-426776cc-d684-43fa-995a-407c2badb414\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>WEIGHT</th>\n","      <th>AGE</th>\n","      <th>G</th>\n","      <th>GS</th>\n","      <th>MP</th>\n","      <th>FG</th>\n","      <th>FGA</th>\n","      <th>FG%</th>\n","      <th>3P</th>\n","      <th>3PA</th>\n","      <th>...</th>\n","      <th>FT%</th>\n","      <th>ORB</th>\n","      <th>DRB</th>\n","      <th>TRB</th>\n","      <th>AST</th>\n","      <th>STL</th>\n","      <th>BLK</th>\n","      <th>TOV</th>\n","      <th>PF</th>\n","      <th>PTS</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>129.000000</td>\n","      <td>129.000000</td>\n","      <td>129.000000</td>\n","      <td>129.000000</td>\n","      <td>129.000000</td>\n","      <td>129.000000</td>\n","      <td>129.000000</td>\n","      <td>129.000000</td>\n","      <td>129.000000</td>\n","      <td>129.000000</td>\n","      <td>...</td>\n","      <td>129.000000</td>\n","      <td>129.000000</td>\n","      <td>129.000000</td>\n","      <td>129.000000</td>\n","      <td>129.000000</td>\n","      <td>129.000000</td>\n","      <td>129.000000</td>\n","      <td>129.000000</td>\n","      <td>129.000000</td>\n","      <td>129.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>213.596789</td>\n","      <td>26.359965</td>\n","      <td>45.949123</td>\n","      <td>21.004879</td>\n","      <td>21.522251</td>\n","      <td>3.523579</td>\n","      <td>7.761215</td>\n","      <td>0.454278</td>\n","      <td>1.171585</td>\n","      <td>3.312108</td>\n","      <td>...</td>\n","      <td>0.755723</td>\n","      <td>0.851037</td>\n","      <td>2.824175</td>\n","      <td>3.675486</td>\n","      <td>2.107043</td>\n","      <td>0.703460</td>\n","      <td>0.398961</td>\n","      <td>1.082913</td>\n","      <td>1.771856</td>\n","      <td>9.575826</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>16.874279</td>\n","      <td>3.228065</td>\n","      <td>17.277616</td>\n","      <td>18.852047</td>\n","      <td>7.071728</td>\n","      <td>1.833626</td>\n","      <td>4.043670</td>\n","      <td>0.066447</td>\n","      <td>0.815925</td>\n","      <td>2.142151</td>\n","      <td>...</td>\n","      <td>0.107859</td>\n","      <td>0.579210</td>\n","      <td>1.180966</td>\n","      <td>1.551954</td>\n","      <td>1.450136</td>\n","      <td>0.342085</td>\n","      <td>0.280724</td>\n","      <td>0.674124</td>\n","      <td>0.515029</td>\n","      <td>5.087857</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>173.000000</td>\n","      <td>20.000000</td>\n","      <td>2.000000</td>\n","      <td>0.000000</td>\n","      <td>7.300000</td>\n","      <td>0.500000</td>\n","      <td>1.600000</td>\n","      <td>0.265000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>0.400000</td>\n","      <td>0.100000</td>\n","      <td>0.600000</td>\n","      <td>0.800000</td>\n","      <td>0.100000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.100000</td>\n","      <td>0.200000</td>\n","      <td>1.600000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>205.000000</td>\n","      <td>24.000000</td>\n","      <td>36.800000</td>\n","      <td>4.000000</td>\n","      <td>16.700000</td>\n","      <td>2.200000</td>\n","      <td>4.900000</td>\n","      <td>0.416500</td>\n","      <td>0.618182</td>\n","      <td>1.900000</td>\n","      <td>...</td>\n","      <td>0.706000</td>\n","      <td>0.500000</td>\n","      <td>1.940000</td>\n","      <td>2.673333</td>\n","      <td>1.000000</td>\n","      <td>0.500000</td>\n","      <td>0.200000</td>\n","      <td>0.600000</td>\n","      <td>1.413333</td>\n","      <td>5.700000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>212.500000</td>\n","      <td>25.533333</td>\n","      <td>48.000000</td>\n","      <td>17.000000</td>\n","      <td>23.150000</td>\n","      <td>3.400000</td>\n","      <td>6.919048</td>\n","      <td>0.451692</td>\n","      <td>1.000000</td>\n","      <td>2.925000</td>\n","      <td>...</td>\n","      <td>0.771000</td>\n","      <td>0.800000</td>\n","      <td>2.681818</td>\n","      <td>3.400000</td>\n","      <td>1.750000</td>\n","      <td>0.700000</td>\n","      <td>0.366667</td>\n","      <td>1.023077</td>\n","      <td>1.800000</td>\n","      <td>9.245455</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>221.000000</td>\n","      <td>29.000000</td>\n","      <td>59.000000</td>\n","      <td>32.750000</td>\n","      <td>26.300000</td>\n","      <td>4.391667</td>\n","      <td>9.610000</td>\n","      <td>0.484800</td>\n","      <td>1.600000</td>\n","      <td>4.400000</td>\n","      <td>...</td>\n","      <td>0.827600</td>\n","      <td>1.050000</td>\n","      <td>3.542857</td>\n","      <td>4.600000</td>\n","      <td>2.900000</td>\n","      <td>0.910000</td>\n","      <td>0.500000</td>\n","      <td>1.300000</td>\n","      <td>2.100000</td>\n","      <td>11.700000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>270.000000</td>\n","      <td>36.000000</td>\n","      <td>73.000000</td>\n","      <td>72.000000</td>\n","      <td>37.700000</td>\n","      <td>10.200000</td>\n","      <td>21.300000</td>\n","      <td>0.660000</td>\n","      <td>4.500000</td>\n","      <td>11.700000</td>\n","      <td>...</td>\n","      <td>1.000000</td>\n","      <td>4.700000</td>\n","      <td>6.500000</td>\n","      <td>10.000000</td>\n","      <td>7.300000</td>\n","      <td>2.100000</td>\n","      <td>2.000000</td>\n","      <td>4.100000</td>\n","      <td>3.400000</td>\n","      <td>25.900000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>8 rows × 27 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-426776cc-d684-43fa-995a-407c2badb414')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-426776cc-d684-43fa-995a-407c2badb414 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-426776cc-d684-43fa-995a-407c2badb414');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":177}]},{"cell_type":"code","source":["top_25_colleges = player_info['COLLEGE'].value_counts().sort_values(ascending=False)[:25]\n","top_10_colleges = player_info['COLLEGE'].sort_values(ascending=False).value_counts()[:10]\n","top_10_colleges"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ayiN_ujeDuoh","executionInfo":{"status":"ok","timestamp":1648671770808,"user_tz":240,"elapsed":125,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"d4d7df43-4941-46c4-c40a-a3c22d18bef9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Duke              34\n","Texas             30\n","Kentucky          29\n","Alabama           21\n","Kansas            20\n","Georgia Tech      15\n","LSU               15\n","Michigan State    15\n","UCLA              13\n","Washington        13\n","Name: COLLEGE, dtype: int64"]},"metadata":{},"execution_count":191}]},{"cell_type":"code","source":["plt.figure(figsize=(12,10)) \n","sns.scatterplot(data=college_mean, x='MP', y='PTS', hue='COLLEGE', palette='mako') #, rug=True\n","\n","#plt.title('', fontsize=16)\n","#plt.xlabel('', fontsize=16)\n","#plt.ylabel('', fontsize=16)\n","plt.legend(loc='best')\n","\n","plt.grid()\n","plt.tight_layout(pad=1)\n","\n","plt.show();"],"metadata":{"id":"WJZVEPHiWd4s"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## HISTORICAL MATCHUPS"],"metadata":{"id":"6YNtBNeqRXSH"}},{"cell_type":"code","source":["#import pandas as pd\n","\n","# ** RUNTIME: 5+ MIN - pre-saved below **\n","\n","#matchups_2000 = get_schedule(2000, playoffs=False)\n","#matchups_2001 = get_schedule(2001, playoffs=False)\n","#matchups_2002 = get_schedule(2002, playoffs=False)\n","#matchups_2003 = get_schedule(2003, playoffs=False)\n","#matchups_2004 = get_schedule(2004, playoffs=False)\n","#matchups_2005 = get_schedule(2005, playoffs=False)\n","#matchups_2006 = get_schedule(2006, playoffs=False)\n","#matchups_2007 = get_schedule(2007, playoffs=False)\n","#matchups_2008 = get_schedule(2008, playoffs=False)\n","#matchups_2009 = get_schedule(2009, playoffs=False)\n","#matchups_2010 = get_schedule(2010, playoffs=False)\n","#matchups_2011 = get_schedule(2011, playoffs=False)\n","#matchups_2012 = get_schedule(2012, playoffs=False)\n","#matchups_2013 = get_schedule(2013, playoffs=False)\n","#matchups_2014 = get_schedule(2014, playoffs=False)\n","#matchups_2015 = get_schedule(2015, playoffs=False)\n","#matchups_2016 = get_schedule(2016, playoffs=False)\n","#matchups_2017 = get_schedule(2017, playoffs=False)\n","#matchups_2018 = get_schedule(2018, playoffs=False)\n","#matchups_2019 = get_schedule(2019, playoffs=False)\n","#matchups_2020 = get_schedule(2020, playoffs=False)\n","#matchups_2021 = get_schedule(2021, playoffs=False)\n","matchups_2022 = get_schedule(2022, playoffs=False)\n","\n","print(f'DOWNLOAD SUCCESSFUL.')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ey-oT8ZWMj48","executionInfo":{"status":"ok","timestamp":1648328784198,"user_tz":240,"elapsed":131468,"user":{"displayName":"Nate Ehat","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01467513665981823629"}},"outputId":"37f6dfbb-a5a6-4021-ad0c-171615e1c85c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["DOWNLOAD SUCCESSFUL.\n"]}]},{"cell_type":"code","source":["## ODDLY 2020 data is missing ..... COVID\n","\n","matchups_2000_2022 = pd.concat([matchups_2000, matchups_2001, matchups_2002, matchups_2003, matchups_2004, matchups_2005,\n","                             matchups_2006, matchups_2007, matchups_2008, matchups_2009, matchups_2010, matchups_2011,\n","                             matchups_2012, matchups_2013, matchups_2014, matchups_2015, matchups_2016, matchups_2017,\n","                             matchups_2018, matchups_2019, matchups_2021, matchups_2022], axis=0, join='outer') # how='outer', , on='DATE'\n","matchups_2000_2022.info()\n","#matchups_2000_2019.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IzMmGO3Y_yEP","executionInfo":{"status":"ok","timestamp":1648328789004,"user_tz":240,"elapsed":7,"user":{"displayName":"Nate Ehat","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01467513665981823629"}},"outputId":"dd4ff954-b630-4978-a861-e12b30f4fb98"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 26502 entries, 0 to 1229\n","Data columns (total 5 columns):\n","DATE           26502 non-null datetime64[ns]\n","VISITOR        26502 non-null object\n","VISITOR_PTS    26377 non-null object\n","HOME           26502 non-null object\n","HOME_PTS       26377 non-null object\n","dtypes: datetime64[ns](1), object(4)\n","memory usage: 1.2+ MB\n"]}]},{"cell_type":"markdown","source":["### DATA EXPORT"],"metadata":{"id":"Sa9xxo9K-iHT"}},{"cell_type":"code","source":["matchup_filepath = 'drive/My Drive/GWU/TEAM-7/data/historical_matchups'"],"metadata":{"id":"dZ43dIrIutjG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["matchups_2000_2022.to_excel(matchup_filepath + '.xlsx', index=False)\n","matchups_2000_2022.to_csv(matchup_filepath + '.csv', index=False)"],"metadata":{"id":"N369_sRE-UON"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### DATA IMPORT"],"metadata":{"id":"bNnBTV5b-jZ-"}},{"cell_type":"code","source":["matchup_history = pd.read_excel(matchup_filepath + '.xlsx', index_col='DATE')\n","#matchup_history = pd.read_csv(matchup_filepath + '.csv', index_col='DATE')"],"metadata":{"id":"2_egNXpH-kcX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### PRE-PROCESSING"],"metadata":{"id":"psLjRtM4K-Ii"}},{"cell_type":"code","source":["print(matchup_history.columns)\n","print('-'*100)\n","print(matchup_history.info())\n","print('-'*100)\n","print(matchup_history.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x9A7vY47K_7F","executionInfo":{"status":"ok","timestamp":1648662068309,"user_tz":240,"elapsed":166,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"59da41d2-b724-476e-8149-37d26cdc1894"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['VISITOR', 'VISITOR_PTS', 'HOME', 'HOME_PTS'], dtype='object')\n","----------------------------------------------------------------------------------------------------\n","<class 'pandas.core.frame.DataFrame'>\n","DatetimeIndex: 26502 entries, 1999-11-02 to 2022-04-10\n","Data columns (total 4 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   VISITOR      26502 non-null  object \n"," 1   VISITOR_PTS  26377 non-null  float64\n"," 2   HOME         26502 non-null  object \n"," 3   HOME_PTS     26377 non-null  float64\n","dtypes: float64(2), object(2)\n","memory usage: 1.0+ MB\n","None\n","----------------------------------------------------------------------------------------------------\n","                          VISITOR  VISITOR_PTS                  HOME  HOME_PTS\n","DATE                                                                          \n","1999-11-02          Orlando Magic         86.0     Charlotte Hornets     100.0\n","1999-11-02  Golden State Warriors         96.0      Dallas Mavericks     108.0\n","1999-11-02           Phoenix Suns        102.0        Denver Nuggets     107.0\n","1999-11-02        Milwaukee Bucks         98.0       Houston Rockets      93.0\n","1999-11-02    Seattle SuperSonics        104.0  Los Angeles Clippers      92.0\n"]}]},{"cell_type":"code","source":["matchup_history['HOME'].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2ntU0XwkLf0t","executionInfo":{"status":"ok","timestamp":1648662073368,"user_tz":240,"elapsed":111,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"095d458d-4afe-4120-8f04-cd051311d0ac"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['Charlotte Hornets', 'Dallas Mavericks', 'Denver Nuggets',\n","       'Houston Rockets', 'Los Angeles Clippers', 'Miami Heat',\n","       'New Jersey Nets', 'New York Knicks', 'San Antonio Spurs',\n","       'Toronto Raptors', 'Utah Jazz', 'Vancouver Grizzlies',\n","       'Washington Wizards', 'Boston Celtics', 'Chicago Bulls',\n","       'Cleveland Cavaliers', 'Los Angeles Lakers', 'Orlando Magic',\n","       'Portland Trail Blazers', 'Atlanta Hawks', 'Phoenix Suns',\n","       'Seattle SuperSonics', 'Detroit Pistons', 'Sacramento Kings',\n","       'Golden State Warriors', 'Indiana Pacers', 'Milwaukee Bucks',\n","       'Minnesota Timberwolves', 'Philadelphia 76ers',\n","       'Memphis Grizzlies', 'New Orleans Hornets', 'Charlotte Bobcats',\n","       'New Orleans/Oklahoma City Hornets', 'Oklahoma City Thunder',\n","       'Brooklyn Nets', 'New Orleans Pelicans'], dtype=object)"]},"metadata":{},"execution_count":82}]},{"cell_type":"code","source":["matchup_history['VISITOR_CODE'] = matchup_history['VISITOR'].map(team_code_dict)\n","matchup_history['HOME_CODE'] = matchup_history['HOME'].map(team_code_dict)\n","matchup_history['VISITOR_MARGIN'] = matchup_history['VISITOR_PTS'] - matchup_history['HOME_PTS']\n","matchup_history['HOME_MARGIN'] = matchup_history['HOME_PTS'] - matchup_history['VISITOR_PTS']\n","\n","matchup_history.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mcoKRwLBLuCz","executionInfo":{"status":"ok","timestamp":1648662075318,"user_tz":240,"elapsed":153,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"97c974c3-1012-44ab-90dc-c5a5c355ab9f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","DatetimeIndex: 26502 entries, 1999-11-02 to 2022-04-10\n","Data columns (total 8 columns):\n"," #   Column          Non-Null Count  Dtype  \n","---  ------          --------------  -----  \n"," 0   VISITOR         26502 non-null  object \n"," 1   VISITOR_PTS     26377 non-null  float64\n"," 2   HOME            26502 non-null  object \n"," 3   HOME_PTS        26377 non-null  float64\n"," 4   VISITOR_CODE    26502 non-null  object \n"," 5   HOME_CODE       26502 non-null  object \n"," 6   VISITOR_MARGIN  26377 non-null  float64\n"," 7   HOME_MARGIN     26377 non-null  float64\n","dtypes: float64(4), object(4)\n","memory usage: 1.8+ MB\n"]}]},{"cell_type":"code","source":["matchup_history"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"pN7TgFayWzqg","executionInfo":{"status":"ok","timestamp":1648662079398,"user_tz":240,"elapsed":258,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"1aa80112-dcc4-4ef9-8656-15cf9fdaa5f0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                          VISITOR  VISITOR_PTS                  HOME  \\\n","DATE                                                                   \n","1999-11-02          Orlando Magic         86.0     Charlotte Hornets   \n","1999-11-02  Golden State Warriors         96.0      Dallas Mavericks   \n","1999-11-02           Phoenix Suns        102.0        Denver Nuggets   \n","1999-11-02        Milwaukee Bucks         98.0       Houston Rockets   \n","1999-11-02    Seattle SuperSonics        104.0  Los Angeles Clippers   \n","...                           ...          ...                   ...   \n","2022-04-10     Los Angeles Lakers          NaN        Denver Nuggets   \n","2022-04-10      San Antonio Spurs          NaN      Dallas Mavericks   \n","2022-04-10        Milwaukee Bucks          NaN   Cleveland Cavaliers   \n","2022-04-10     Washington Wizards          NaN     Charlotte Hornets   \n","2022-04-10         Indiana Pacers          NaN         Brooklyn Nets   \n","\n","            HOME_PTS VISITOR_CODE HOME_CODE  VISITOR_MARGIN  HOME_MARGIN  \n","DATE                                                                      \n","1999-11-02     100.0          ORL       CHO           -14.0         14.0  \n","1999-11-02     108.0          GSW       DAL           -12.0         12.0  \n","1999-11-02     107.0          PHO       DEN            -5.0          5.0  \n","1999-11-02      93.0          MIL       HOU             5.0         -5.0  \n","1999-11-02      92.0          OKC       LAC            12.0        -12.0  \n","...              ...          ...       ...             ...          ...  \n","2022-04-10       NaN          LAL       DEN             NaN          NaN  \n","2022-04-10       NaN          SAS       DAL             NaN          NaN  \n","2022-04-10       NaN          MIL       CLE             NaN          NaN  \n","2022-04-10       NaN          WAS       CHO             NaN          NaN  \n","2022-04-10       NaN          IND       BRK             NaN          NaN  \n","\n","[26502 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-eefc2c36-9571-40ee-8a9a-72be773edfaa\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>VISITOR</th>\n","      <th>VISITOR_PTS</th>\n","      <th>HOME</th>\n","      <th>HOME_PTS</th>\n","      <th>VISITOR_CODE</th>\n","      <th>HOME_CODE</th>\n","      <th>VISITOR_MARGIN</th>\n","      <th>HOME_MARGIN</th>\n","    </tr>\n","    <tr>\n","      <th>DATE</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1999-11-02</th>\n","      <td>Orlando Magic</td>\n","      <td>86.0</td>\n","      <td>Charlotte Hornets</td>\n","      <td>100.0</td>\n","      <td>ORL</td>\n","      <td>CHO</td>\n","      <td>-14.0</td>\n","      <td>14.0</td>\n","    </tr>\n","    <tr>\n","      <th>1999-11-02</th>\n","      <td>Golden State Warriors</td>\n","      <td>96.0</td>\n","      <td>Dallas Mavericks</td>\n","      <td>108.0</td>\n","      <td>GSW</td>\n","      <td>DAL</td>\n","      <td>-12.0</td>\n","      <td>12.0</td>\n","    </tr>\n","    <tr>\n","      <th>1999-11-02</th>\n","      <td>Phoenix Suns</td>\n","      <td>102.0</td>\n","      <td>Denver Nuggets</td>\n","      <td>107.0</td>\n","      <td>PHO</td>\n","      <td>DEN</td>\n","      <td>-5.0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>1999-11-02</th>\n","      <td>Milwaukee Bucks</td>\n","      <td>98.0</td>\n","      <td>Houston Rockets</td>\n","      <td>93.0</td>\n","      <td>MIL</td>\n","      <td>HOU</td>\n","      <td>5.0</td>\n","      <td>-5.0</td>\n","    </tr>\n","    <tr>\n","      <th>1999-11-02</th>\n","      <td>Seattle SuperSonics</td>\n","      <td>104.0</td>\n","      <td>Los Angeles Clippers</td>\n","      <td>92.0</td>\n","      <td>OKC</td>\n","      <td>LAC</td>\n","      <td>12.0</td>\n","      <td>-12.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-10</th>\n","      <td>Los Angeles Lakers</td>\n","      <td>NaN</td>\n","      <td>Denver Nuggets</td>\n","      <td>NaN</td>\n","      <td>LAL</td>\n","      <td>DEN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-10</th>\n","      <td>San Antonio Spurs</td>\n","      <td>NaN</td>\n","      <td>Dallas Mavericks</td>\n","      <td>NaN</td>\n","      <td>SAS</td>\n","      <td>DAL</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-10</th>\n","      <td>Milwaukee Bucks</td>\n","      <td>NaN</td>\n","      <td>Cleveland Cavaliers</td>\n","      <td>NaN</td>\n","      <td>MIL</td>\n","      <td>CLE</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-10</th>\n","      <td>Washington Wizards</td>\n","      <td>NaN</td>\n","      <td>Charlotte Hornets</td>\n","      <td>NaN</td>\n","      <td>WAS</td>\n","      <td>CHO</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-10</th>\n","      <td>Indiana Pacers</td>\n","      <td>NaN</td>\n","      <td>Brooklyn Nets</td>\n","      <td>NaN</td>\n","      <td>IND</td>\n","      <td>BRK</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>26502 rows × 8 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eefc2c36-9571-40ee-8a9a-72be773edfaa')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-eefc2c36-9571-40ee-8a9a-72be773edfaa button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-eefc2c36-9571-40ee-8a9a-72be773edfaa');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":84}]},{"cell_type":"code","source":[""],"metadata":{"id":"b4tcOXj2c7u5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["matchup_history.dropna(inplace=True)\n","matchup_history.info()"],"metadata":{"id":"gRwokpY3LCVm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648662102282,"user_tz":240,"elapsed":7,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"1cbc5c77-854c-4252-91aa-7960a6b3369b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","DatetimeIndex: 26377 entries, 1999-11-02 to 2022-03-25\n","Data columns (total 8 columns):\n"," #   Column          Non-Null Count  Dtype  \n","---  ------          --------------  -----  \n"," 0   VISITOR         26377 non-null  object \n"," 1   VISITOR_PTS     26377 non-null  float64\n"," 2   HOME            26377 non-null  object \n"," 3   HOME_PTS        26377 non-null  float64\n"," 4   VISITOR_CODE    26377 non-null  object \n"," 5   HOME_CODE       26377 non-null  object \n"," 6   VISITOR_MARGIN  26377 non-null  float64\n"," 7   HOME_MARGIN     26377 non-null  float64\n","dtypes: float64(4), object(4)\n","memory usage: 1.8+ MB\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"aZnjkuBqLFPs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"dQomOPzJLFyp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"OoYGMVO2LGON"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### DATA VIZ"],"metadata":{"id":"xzVelU4CDlcK"}},{"cell_type":"code","source":["plt.figure(figsize=(12,10))\n","sns.histplot(matchup_history['HOME_CODE'], palette='mako') #, rug=True\n","\n","#plt.title('', fontsize=16)\n","#plt.xlabel('', fontsize=16)\n","#plt.ylabel('', fontsize=16)\n","plt.legend(loc='best')\n","\n","plt.grid()\n","plt.tight_layout(pad=1)\n","\n","plt.show();"],"metadata":{"id":"_RdOPiD1E8Xq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## LEAGUE STANDINGS"],"metadata":{"id":"b5yliVJv9jby"}},{"cell_type":"code","source":["standings = get_standings(date='2022-03-06')\n","print(standings)"],"metadata":{"id":"JSb1sS1-9SlJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## BOX SCORES"],"metadata":{"id":"nD8xpzLNRsvs"}},{"cell_type":"code","source":["s = get_box_scores('2020-01-13', 'CHI', 'BOS', period='GAME', stat_type='BASIC')\n","print(s)"],"metadata":{"id":"6YefvaqJ54Nw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["s = get_box_scores('2020-01-13', 'CHI', 'BOS', period='GAME', stat_type='BASIC')\n","print(s)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3Uu13krnMjva","executionInfo":{"status":"ok","timestamp":1648163497415,"user_tz":240,"elapsed":1604,"user":{"displayName":"Nate Ehat","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01467513665981823629"}},"outputId":"9c75e06f-f569-4e15-e772-c2044a1e24c6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'CHI':                  PLAYER     MP  FG FGA    FG% 3P 3PA    3P%  FT FTA  ... ORB  \\\n","0           Zach LaVine  34:52   9  18   .500  3   6   .500   9   9  ...   1   \n","1             Kris Dunn  30:01   3   7   .429  1   2   .500   2   3  ...   0   \n","2   TomÃ¡Å¡ SatoranskÃ½  25:55   3   8   .375  0   1   .000   6   8  ...   1   \n","3       Lauri Markkanen  25:20   4   9   .444  0   3   .000   1   2  ...   1   \n","4        Daniel Gafford  20:24   4   5   .800  0   0    NaN   2   2  ...   2   \n","5        Thaddeus Young  24:23   8  14   .571  1   4   .250   0   0  ...   0   \n","6            Coby White  23:23   3   8   .375  0   4   .000   0   0  ...   1   \n","7           Luke Kornet  21:53   0   2   .000  0   2   .000   0   0  ...   0   \n","8    Chandler Hutchison  14:24   1   5   .200  0   0    NaN   0   0  ...   1   \n","9      Ryan Arcidiacono  13:25   0   2   .000  0   2   .000   0   0  ...   0   \n","10     Denzel Valentine   2:00   2   2  1.000  1   1  1.000   0   0  ...   0   \n","11   Shaquille Harrison   2:00   0   1   .000  0   0    NaN   1   2  ...   0   \n","12   Cristiano FelÃ­cio   2:00   0   0    NaN  0   0    NaN   0   0  ...   0   \n","13          Team Totals    240  37  81   .457  6  25   .240  21  26  ...   7   \n","\n","   DRB TRB AST STL BLK TOV  PF  PTS  +/-  \n","0    4   5   2   1   0   6   3   30   -7  \n","1    5   5   1   0   0   2   2    9   -5  \n","2    0   1   7   1   0   2   2   12   +3  \n","3    5   6   0   2   0   0   3    9   -5  \n","4    1   3   1   0   2   0   4   10   +8  \n","5    2   2   1   0   0   1   1   17  -11  \n","6    2   3   4   0   0   1   1    6  -18  \n","7    5   5   0   0   1   1   2    0  -24  \n","8    2   3   0   1   2   1   2    2   -6  \n","9    3   3   0   0   0   0   2    0   -7  \n","10   1   1   0   0   0   0   0    5   +4  \n","11   1   1   0   0   0   0   0    1   +4  \n","12   0   0   0   0   0   0   0    0   +4  \n","13  31  38  16   5   5  14  22  101  NaN  \n","\n","[14 rows x 21 columns], 'BOS':              PLAYER     MP  FG FGA   FG% 3P 3PA    3P%  FT FTA  ... ORB DRB  \\\n","0      Jaylen Brown  30:15   5  13  .385  0   1   .000   9   9  ...   2   1   \n","1    Gordon Hayward  30:09   4  11  .364  0   1   .000   0   0  ...   0   6   \n","2      Jayson Tatum  29:43   7  17  .412  2   7   .286   5   7  ...   0   6   \n","3      Kemba Walker  27:36   5   9  .556  3   6   .500   1   2  ...   0   4   \n","4      Enes Freedom  26:27   7   9  .778  0   0    NaN   1   1  ...   2   7   \n","5      Marcus Smart  33:24   4   8  .500  2   5   .400   2   2  ...   0   5   \n","6    Brad Wanamaker  24:11   3   5  .600  1   1  1.000   2   2  ...   1   2   \n","7    Grant Williams  16:17   4   8  .500  1   2   .500   2   2  ...   4   1   \n","8      Semi Ojeleye  12:57   0   0   NaN  0   0    NaN   0   0  ...   1   0   \n","9   Vincent Poirier   5:01   0   3  .000  0   0    NaN   2   2  ...   0   0   \n","10   Romeo Langford   2:00   0   0   NaN  0   0    NaN   2   2  ...   0   0   \n","11    Javonte Green   2:00   0   0   NaN  0   0    NaN   0   0  ...   0   1   \n","12      Team Totals    240  39  83  .470  9  23   .391  26  29  ...  10  33   \n","\n","   TRB AST STL BLK TOV  PF  PTS  +/-  \n","0    3   3   2   0   0   3   19  +10  \n","1    6   8   0   0   1   3    8  +14  \n","2    6   2   1   2   1   1   21   -2  \n","3    4   2   0   2   2   1   14   +2  \n","4    9   0   1   1   5   3   15   +4  \n","5    5   8   3   0   1   3   12  +25  \n","6    3   2   0   0   0   1    9   +7  \n","7    5   3   0   1   1   2   11  +11  \n","8    1   0   0   0   0   0    0    0  \n","9    0   0   0   0   1   2    2   -3  \n","10   0   0   0   0   0   0    2   -4  \n","11   1   0   0   0   0   0    0   -4  \n","12  43  28   7   6  12  19  113  NaN  \n","\n","[13 rows x 21 columns]}\n"]}]},{"cell_type":"markdown","source":["## PLAY-BY-PLAY"],"metadata":{"id":"cznJiGz9SmQ1"}},{"cell_type":"code","source":["s = get_pbp('2020-01-13', 'CHI', 'BOS')\n","print(s)"],"metadata":{"id":"0z7idDozMuqW"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## SHOT CHARTS"],"metadata":{"id":"ZQXM6aO9RQeY"}},{"cell_type":"code","source":["s = get_shot_chart('2020-01-13', 'CHI', 'BOS')\n","print(s)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V6l8B0UwMjhs","executionInfo":{"status":"ok","timestamp":1648163686167,"user_tz":240,"elapsed":1162,"user":{"displayName":"Nate Ehat","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01467513665981823629"}},"outputId":"e20e727f-edd6-4c7d-85f5-2c9c9301e76b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'CHI':           x        y  QUARTER TIME_REMAINING              PLAYER MAKE_MISS  \\\n","0   13.8 ft  26.7 ft        1        11:17.0     Lauri Markkanen      MISS   \n","1   31.7 ft  17.6 ft        1        10:37.0    Tomáš Satoranský      MISS   \n","2   32.0 ft  8.26 ft        1        10:06.0     Lauri Markkanen      MISS   \n","3   24.0 ft  2.68 ft        1        10:05.0     Lauri Markkanen      MAKE   \n","4   24.5 ft  4.97 ft        1         9:13.0      Daniel Gafford      MAKE   \n","..      ...      ...      ...            ...                 ...       ...   \n","76  25.3 ft  3.58 ft        4         3:35.0         Zach LaVine      MAKE   \n","77  8.20 ft  27.8 ft        4         2:54.0         Zach LaVine      MAKE   \n","78  17.7 ft  11.2 ft        4         1:47.0  Shaquille Harrison      MISS   \n","79  17.2 ft  16.4 ft        4         0:54.0    Denzel Valentine      MAKE   \n","80   6.1 ft  20.7 ft        4         0:18.0    Denzel Valentine      MAKE   \n","\n","    VALUE DISTANCE  \n","0       3    26 ft  \n","1       2    16 ft  \n","2       2     9 ft  \n","3       2     1 ft  \n","4       2     2 ft  \n","..    ...      ...  \n","76      2     1 ft  \n","77      3    29 ft  \n","78      2    10 ft  \n","79      2    15 ft  \n","80      3    25 ft  \n","\n","[81 rows x 8 columns], 'BOS':           x        y  QUARTER TIME_REMAINING           PLAYER MAKE_MISS  \\\n","0   25.9 ft  3.78 ft        1        11:35.0     Enes Freedom      MAKE   \n","1    9.6 ft  9.55 ft        1        11:00.0     Jayson Tatum      MAKE   \n","2   24.3 ft  4.77 ft        1         8:50.0     Enes Freedom      MAKE   \n","3   22.5 ft  3.28 ft        1         8:19.0     Enes Freedom      MAKE   \n","4   19.9 ft  8.16 ft        1         7:39.0     Jayson Tatum      MISS   \n","..      ...      ...      ...            ...              ...       ...   \n","78  25.3 ft  5.17 ft        4         3:03.0   Gordon Hayward      MAKE   \n","79   6.7 ft  21.7 ft        4         2:39.0     Kemba Walker      MAKE   \n","80  24.9 ft  29.1 ft        4         2:02.0     Kemba Walker      MAKE   \n","81  34.1 ft  17.1 ft        4         1:33.0  Vincent Poirier      MISS   \n","82  19.9 ft  5.17 ft        4         0:33.0  Vincent Poirier      MISS   \n","\n","    VALUE DISTANCE  \n","0       2     2 ft  \n","1       2    16 ft  \n","2       2     2 ft  \n","3       2     2 ft  \n","4       2     6 ft  \n","..    ...      ...  \n","78      2     2 ft  \n","79      3    25 ft  \n","80      3    26 ft  \n","81      2    17 ft  \n","82      2     5 ft  \n","\n","[83 rows x 8 columns]}\n"]}]},{"cell_type":"code","source":["from basketball_reference_scraper.injury_report import get_injury_report\n","\n","s = get_injury_report()\n","print(s)"],"metadata":{"id":"E7a5LbEKNVhK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648659602600,"user_tz":240,"elapsed":698,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"19a49d77-4dbd-46dd-96be-7a0e1fd75973"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["               PLAYER   TEAM       DATE  \\\n","0        John Collins  [ATL] 2022-03-18   \n","1    Danilo Gallinari  [ATL] 2022-03-28   \n","2     De'Andre Hunter  [ATL] 2022-03-28   \n","3         Skylar Mays  [ATL] 2022-03-28   \n","4        Jaylen Brown  [BOS] 2022-03-29   \n","..                ...    ...        ...   \n","110      Danuel House  [UTA] 2022-03-29   \n","111  Hassan Whiteside  [UTA] 2022-03-29   \n","112      Bradley Beal  [WAS] 2022-02-08   \n","113      Vernon Carey  [WAS] 2022-03-23   \n","114        Kyle Kuzma  [WAS] 2022-03-28   \n","\n","                                           DESCRIPTION          STATUS  \\\n","0    Collins is sidelined indefinitely, according t...             Out   \n","1    Gallinari did not play in Monday's (Mar. 28) g...      Day To Day   \n","2    DeAndre Hunter did not play in Monday's (Mar. ...      Day To Day   \n","3    Mays did not play in Monday's (Mar. 28) game a...      Day To Day   \n","4    The Celtics have listed Brown as PROBABLE for ...      Day To Day   \n","..                                                 ...             ...   \n","110  The Jazz have listed House Jr. as QUESTIONABLE...      Day To Day   \n","111  The Jazz have listed Whiteside as OUT for Tues...             Out   \n","112  Beal will undergo season ending surgery on his...  Out For Season   \n","113  Carey Jr. has not played since Feb. 12 and no ...             Out   \n","114  Kuzma is out for Tuesday's (Mar. 29) game agai...             Out   \n","\n","          INJURY  \n","0    Finger/Foot  \n","1          Elbow  \n","2           Knee  \n","3        Illness  \n","4           Knee  \n","..           ...  \n","110         Knee  \n","111         Foot  \n","112        Wrist  \n","113         Calf  \n","114         Knee  \n","\n","[115 rows x 6 columns]\n"]}]},{"cell_type":"markdown","source":["## PLAYER GAME LOGS"],"metadata":{"id":"fW54hfPWxb8H"}},{"cell_type":"code","source":["#s = get_roster_stats('GSW', 2022, data_format='PER_GAME', playoffs=False)\n","#print(s)\n","\n","#s = get_opp_stats('GSW', 2021, data_format='PER_GAME')\n","#print(s)\n","\n","#s = get_team_misc('GSW', 2021)\n","#print(s)"],"metadata":{"id":"9oDVRP08VbRJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from basketball_reference_scraper.players import get_game_logs #get_player_headshot, get_stats\n","\n","df = get_game_logs('LeBron James', '2010-01-19', '2014-01-20', playoffs=False)\n","print(df)\n","\n","#s = get_stats('Stephen Curry', stat_type='PER_GAME', playoffs=False, career=False)\n","#print(s)\n","\n","#df = get_game_logs('Pau Gasol', '2010-01-12', '2010-01-20', playoffs=False)\n","#print(df)\n","\n","# url = get_player_headshot('Kobe Bryant')\n","# print(url)"],"metadata":{"id":"_Tk1S8FnNVa1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#df = get_game_logs('HOU', '2010-01-12', '2010-01-15', playoffs=False)\n","#print(df)"],"metadata":{"id":"iCBEihoN5sgw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#from basketball_reference_scraper.drafts import get_draft_class\n","\n","#df = get_draft_class(2003)\n","#print(df)"],"metadata":{"id":"_kB0aibxNVSv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"G7c61vyWNVMT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3ANJgcjz3E2p"},"source":["# MODELING PIPELINE"]},{"cell_type":"markdown","metadata":{"id":"usUxOLYrgg_U"},"source":["## IMPORTS"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aXa-iVxH3DYB"},"outputs":[],"source":["## LIBRARY IMPORTS\n","\n","import sys\n","#from google.colab import drive\n","\n","import numpy as np\n","import pandas as pd\n","\n","%tensorflow_version 2.x \n","import tensorflow as tf\n","from tensorflow import keras\n","\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","\n","random_seed = 42\n","tf.random.set_seed(random_seed)\n","#import numpy as np\n","np.random.seed(random_seed)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3bhLnwOOgj86"},"outputs":[],"source":["# Absolute path of current folder\n","abspath_curr = '/content/drive/My Drive/SPORTS/NBA/'\n","\n","# Absolute path of shallow utilities folder\n","abspath_util_shallow = '/content/drive/My Drive/Colab Notebooks/teaching/gwu/machine_learning_I/spring_2022/code/utilities/p2_shallow_learning/'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eSnD1HlaezNN"},"outputs":[],"source":["# IMPORT \n","\n","#reg_szn_detail = pd.read_csv('drive/My Drive/SPORTS/NCAAB/data/MRegularSeasonDetailedResults.csv')\n","\n","#print(tourney_detail.head())\n","#print('-'*100)\n","#print(tourney_detail.info())\n","#print('-'*100)\n","#print(reg_szn_detail.head())\n","#print('-'*100)\n","#print(reg_szn_detail.info())"]},{"cell_type":"markdown","metadata":{"id":"UWIa1jzwo9UZ"},"source":["## FEATURE ENGINEERING"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PxkatjToOT06"},"outputs":[],"source":["#reg_szn_detail['WRatio'] = (reg_szn_detail.WCount / (reg_szn_detail.WCount + reg_szn_detail.LCount))\n","\n","#reg_szn_detail['WtdAvgMargin'] = ((reg_szn_detail['WCount'] * reg_szn_detail['AMarginAvg'] -\n","#                                reg_szn_detail['LCount'] * reg_szn_detail['BMarginAvg']) /\n","#                               (reg_szn_detail['WCount'] + reg_szn_detail['LCount'])\n","                               )\n","#reg_szn_detail.info()\n"]},{"cell_type":"markdown","metadata":{"id":"ZkV9DtckfCxa"},"source":["## TARGET"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"c97zXZg-gHuZ"},"outputs":[],"source":["# GENERATE COLUMNS FOR TARGET VARIABLE PREDICTION\n","\n","#reg_szn_detail['ScoreMargin'] = reg_szn_detail['AScore'] - reg_szn_detail['BScore']\n","#reg_szn_detail['Win'] = (reg_szn_detail['ScoreMargin'] > 0).astype(int)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IAxOAVyLQU_b"},"outputs":[],"source":["# DROP COLUMNS\n","#reg_szn_detail.drop(['NumOT', 'ALoc', 'WCount', 'LCount', 'AMargin', 'BMargin', 'ATeamID', 'BTeamID', 'TeamID', 'DayNum', 'Season'], axis=1, inplace=True)\n","#reg_szn_detail.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zqrHNxevQOwU"},"outputs":[],"source":[""]},{"cell_type":"markdown","metadata":{"id":"8ODVeqMXhjMA"},"source":["## TRAIN-TEST"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HNixr0YiZb7C"},"outputs":[],"source":["# DEFINE TEST FEATURES\n","test_features = ['ScoreMargin',\n","                 'Win',\n","                 'AFGM',\n","     'BFGM',\n","     'AFGA',\n","     'BFGA', \n","     'AFGM3',\n","     'BFGM3',\n","     'AFGA3',\n","     'BFGA3',\n","     'AFTM',\n","     'BFTM', \n","     'AFTA',\n","     'BFTA',\n","    'AOR',\n","    'BOR',\n","    'ADR',\n","    'BDR',\n","     'AAst',\n","     'BAst',\n","     'ATO',\n","     'BTO',\n","     'AStl',\n","     'BStl', \n","     'ABlk',\n","     'BBlk',\n","     'APF',\n","     'BPF',\n","     'WtdAvgMargin',\n","     'WRatio',\n","]\n","\n","reg_szn_test = reg_szn_detail[test_features]\n","reg_szn_test.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xmrLYk1KZhW8"},"outputs":[],"source":["reg_szn_test.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GMm53nLtlx_G"},"outputs":[],"source":["from sklearn.model_selection import train_test_split\n","\n","train, test = train_test_split(reg_szn_test, train_size=0.8, random_state=42)\n","\n","# Load the raw training data\n","df_raw_train = train\n","\n","# Make a copy of df_raw_train\n","df_train = df_raw_train.copy(deep=True)\n","\n","# Load the raw test data\n","df_raw_test = test\n","\n","# Make a copy of df_raw_test\n","df_test = df_raw_test.copy(deep=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KyFbk9F8cIKM"},"outputs":[],"source":["## TARGET VARIABLE ASSIGNMENT\n","\n","target = 'Win'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"J2EWveE2gONi"},"outputs":[],"source":["# Print the dimension of df_train\n","pd.DataFrame([[df_train.shape[0], df_train.shape[1]]], columns=['# rows', '# columns'])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tgb8_Ug7iWcZ"},"outputs":[],"source":["# Print the dimension of df_test\n","pd.DataFrame([[df_test.shape[0], df_test.shape[1]]], columns=['# rows', '# columns'])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2IMZ-TdGiWUU"},"outputs":[],"source":["# Print the first 5 rows of df_train\n","df_train.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lAEUUyIFiWH7"},"outputs":[],"source":["# Print the first 5 rows of df_test\n","df_test.head()"]},{"cell_type":"markdown","metadata":{"id":"Nl1UC6MxidAB"},"source":["## SPLIT"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uafx3fHzmvAU"},"outputs":[],"source":["from sklearn.model_selection import train_test_split\n","\n","# Divide the training data into training (80%) and validation (20%)\n","df_train, df_val = train_test_split(df_train, train_size=0.8, random_state=random_seed)\n","\n","# Reset the index\n","df_train, df_val = df_train.reset_index(drop=True), df_val.reset_index(drop=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UHhNX6ism56I"},"outputs":[],"source":["# Print the dimension of df_train\n","pd.DataFrame([[df_train.shape[0], df_train.shape[1]]], columns=['# rows', '# columns'])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1jtWDanzm6Hu"},"outputs":[],"source":["# Print the dimension of df_val\n","pd.DataFrame([[df_val.shape[0], df_val.shape[1]]], columns=['# rows', '# columns'])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4QkLVMWQncQ2"},"outputs":[],"source":["# Combine df_train, df_val and df_test\n","df = pd.concat([df_train, df_val, df_test], sort=False)\n","df.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tGa3GtHNdzhO"},"outputs":[],"source":[""]},{"cell_type":"markdown","metadata":{"id":"hCrfAAiYin-n"},"source":["## LABEL ENCODER"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EDcHsd-ZiqcO"},"outputs":[],"source":["from sklearn.preprocessing import LabelEncoder\n","\n","# The LabelEncoder\n","le = LabelEncoder()\n","\n","# Encode categorical target in the combined data\n","df[target] = le.fit_transform(df[target])\n","\n","# Print the first 5 rows of df\n","df.head()"]},{"cell_type":"markdown","metadata":{"id":"fbM0hZtdSXUi"},"source":["## PRE-PROCESSING"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QXygJyLOofxp"},"outputs":[],"source":["#df.drop(['id'], inplace=True,  axis=1)\n","#df.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3eliElTTm6ia"},"outputs":[],"source":["# Separating the training data\n","df_train = df.iloc[:df_train.shape[0], :]\n","\n","# Separating the validation data\n","df_val = df.iloc[df_train.shape[0]:df_train.shape[0] + df_val.shape[0], :]\n","\n","# Separating the test data\n","df_test = df.iloc[df_train.shape[0] + df_val.shape[0]:, :]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bf2325Sjm6xM"},"outputs":[],"source":["# Print the dimension of df_train\n","pd.DataFrame([[df_train.shape[0], df_train.shape[1]]], columns=['# rows', '# columns'])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CS_125FknKMU"},"outputs":[],"source":["# Print the dimension of df_val\n","pd.DataFrame([[df_val.shape[0], df_val.shape[1]]], columns=['# rows', '# columns'])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ELcNjqgqnKa6"},"outputs":[],"source":["# Print the dimension of df_test\n","pd.DataFrame([[df_test.shape[0], df_test.shape[1]]], columns=['# rows', '# columns'])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gDAe1F5pnOI4"},"outputs":[],"source":["# Combine df_train, df_val and df_test\n","df = pd.concat([df_train, df_val, df_test], sort=False)"]},{"cell_type":"markdown","metadata":{"id":"S8FIHphzirfn"},"source":["## FEATURE MATRIX"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ss_7HjdTi7tk"},"outputs":[],"source":["# Get the feature matrix\n","X_train = df_train[np.setdiff1d(df_train.columns, [target])].values\n","X_val = df_val[np.setdiff1d(df_val.columns, [target])].values\n","X_test = df_test[np.setdiff1d(df_test.columns, [target])].values\n","\n","# Get the target vector\n","y_train = df_train[target].values\n","y_val = df_val[target].values\n","y_test = df_test[target].values"]},{"cell_type":"markdown","metadata":{"id":"qoZe3Trki-D-"},"source":["## SCALE"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5SLBuWN-jAM3"},"outputs":[],"source":["from sklearn.preprocessing import MinMaxScaler\n","\n","# MinMaxScaler\n","mms = MinMaxScaler()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"D5vYCo2IjArX"},"outputs":[],"source":["# Normalize the training data\n","X_train = mms.fit_transform(X_train)\n","\n","# Normalize the validation data\n","X_val = mms.transform(X_val)\n","\n","# Normalize the test data\n","X_test = mms.transform(X_test)"]},{"cell_type":"markdown","metadata":{"id":"oZl9LDdbkTV8"},"source":["# HYPERPARAMETER TUNING"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IruKG0UmkTV8"},"outputs":[],"source":["# Model / Package Imports\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.neural_network import MLPClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","#from sklearn.experimental import enable_hist_gradient_boosting\n","#from sklearn.ensemble import HistGradientBoostingClassifier\n","\n","# Creating dictionary of the models\n","models = {'lr': LogisticRegression(class_weight='balanced', random_state=random_seed),\n","          'mlpc': MLPClassifier(early_stopping=True, random_state=random_seed),\n","          'rfc': RandomForestClassifier(class_weight='balanced', random_state=random_seed),\n","          #'hgbc': HistGradientBoostingClassifier(random_state=random_seed)\n","          }"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JXR-KWh2lBgr"},"outputs":[],"source":["# Creating the dictionary of the pipelines\n","from sklearn.pipeline import Pipeline\n","\n","pipes = {}\n","\n","for acronym, model in models.items():\n","    pipes[acronym] = Pipeline([('model', model)])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":661,"status":"ok","timestamp":1647497150825,"user":{"displayName":"Nate Ehat","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01467513665981823629"},"user_tz":240},"id":"P6VWIlNGg3Af","outputId":"547b69ec-70cc-44c4-d2b6-5d7dfd6b0e56"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/My Drive/Colab Notebooks/teaching/gwu/machine_learning_I/spring_2022/code/utilities/p2_shallow_learning\n"]}],"source":["## SUPPLEMENTAL - NOT NECESSARY\n","\n","# Change working directory to the absolute path of the shallow utilities folder\n","%cd $abspath_util_shallow\n","\n","# Import the shallow utitilities\n","%run pmlm_utilities_shallow.ipynb"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iqJmzdN3lBaF"},"outputs":[],"source":["#Getting the predefined split cross-validator\n","  # feature matrix and target velctor in the combined training and validation data\n","  # target vector in the combined training and validation data\n","  # PredefinedSplit\n","  # See the implementation in pmlm_utilities.ipynb\n","\n","X_train_val, y_train_val, ps = get_train_val_ps(X_train, y_train, X_val, y_val)"]},{"cell_type":"markdown","metadata":{"id":"KS8ta-DilVt4"},"source":["## GridSearch CV Param Grids"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZVC6gMGJlQN4"},"outputs":[],"source":["param_grids = {}"]},{"cell_type":"markdown","metadata":{"id":"AOG6now0vvRA"},"source":["## Logistic Regression"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sfpiyyL6lQGC"},"outputs":[],"source":["# The parameter grid of tol\n","tol_grid = [10 ** -5, 10 ** -3] #10 ** -11, \n","  # ORIGINAL: tol_grid = [10 ** -5, 10 ** -4, 10 ** -3]\n","\n","# The parameter grid of C\n","C_grid = [10, 1, .1, 0.01] # 1 , .001\n","  # ORIGINAL: C_grid = [0.1, 1, 10]\n","\n","# The parameter grid of penalty type\n","penalty_grid = ['none', 'l1', 'l2'] #, 'elasticnet'\n","\n","# The parameter grid of solver type\n","solver_grid = ['newton-cg', 'lbfgs', 'liblinear'] # 'sag', 'saga'\n","\n","# Update param_grids\n","param_grids['lr'] = [{'model__tol': tol_grid,\n","                      'model__C': C_grid,\n","                      #'model__penalty': penalty_grid,\n","                      'model__solver': solver_grid,\n","                      }]"]},{"cell_type":"markdown","metadata":{"id":"UKPlOan4v48O"},"source":["## MLP Classifier"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"75KaQQpQlXbE"},"outputs":[],"source":["# The grids for alpha\n","alpha_grids = [10 ** i for i in range(-5, -2)]\n","  # ORIGINAL: alpha_grids = [10 ** i for i in range(-5, -2)]\n","\n","# The grids for learning_rate_init\n","learning_rate_init_grids = [9 ** i for i in range(-3, -1)]\n","  # ORIGINAL: learning_rate_init_grids = [10 ** i for i in range(-4, -1)]\n","\n","# Update param_grids\n","param_grids['mlpc'] = [{'model__alpha': alpha_grids,\n","                        'model__learning_rate_init': learning_rate_init_grids}]"]},{"cell_type":"markdown","metadata":{"id":"in6p-qHnv7-R"},"source":["## Random Forest Classifier"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Qb-Wrovzvs1e"},"outputs":[],"source":["# The grids for min_samples_split\n","min_samples_split_grids = [20, 100]\n","  # ORIGINAL: min_samples_split_grids = [2, 20, 100]\n","\n","# The grids for min_samples_leaf\n","min_samples_leaf_grids = [1, 100]\n","  # ORIGINAL: min_samples_leaf_grids = [1, 20, 100]\n","\n","# The grids for n_estimators\n","n_estimators_grids = [100] # 10, 50, 100\n","\n","# The grids for max_depth\n","max_depth_grids = [1, 5, 10]\n","\n","# The grids for max_features\n","max_features_grids = ['auto', 'sqrt']\n","\n","# Update param_grids\n","param_grids['rfc'] = [{'model__min_samples_split': min_samples_split_grids,\n","                       'model__min_samples_leaf': min_samples_leaf_grids,\n","                       'model__n_estimators': n_estimators_grids,\n","                       #'model__max_depth': max_depth_grids,\n","                       #'model__max_features': max_features_grids,\n","                       }]\n","\n","                       # model__max_depth: "]},{"cell_type":"markdown","metadata":{"id":"COEUkeSujw6y"},"source":["## GRIDSEARCH"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fXvemf-DdqXM"},"outputs":[],"source":[""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"elIljmhtlawI"},"outputs":[],"source":["import os\n","# Make directory\n","directory = os.path.dirname(abspath_curr + '/result/mm2022/GridSearchCV_results/')\n","if not os.path.exists(directory):\n","    os.makedirs(directory)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1zMvf0SulbGU"},"outputs":[],"source":["# HYPERPARAMETER TUNING\n","\n","from sklearn.model_selection import GridSearchCV\n","\n","# The list of [best_score_, best_params_, best_estimator_] obtained by GridSearchCV\n","best_score_params_estimator_gs = []\n","\n","# For each model\n","for acronym in pipes.keys():\n","    # GridSearchCV\n","    gs = GridSearchCV(estimator=pipes[acronym],\n","                      param_grid=param_grids[acronym],\n","                      scoring='f1_macro',\n","                      n_jobs=2, #8\n","                      cv=ps, #5\n","                      return_train_score=True)\n","        \n","    # Fit the pipeline\n","    gs = gs.fit(X_train_val, y_train_val)\n","    \n","    # Update best_score_params_estimator_gs\n","    best_score_params_estimator_gs.append([gs.best_score_, gs.best_params_, gs.best_estimator_])\n","    \n","    # Sort cv_results in ascending order of 'rank_test_score' and 'std_test_score'\n","    cv_results = pd.DataFrame.from_dict(gs.cv_results_).sort_values(by=['rank_test_score', 'std_test_score'])\n","    \n","    # Get the important columns in cv_results\n","    important_columns = ['rank_test_score',\n","                         'mean_test_score', \n","                         'std_test_score', \n","                         'mean_train_score', \n","                         'std_train_score',\n","                         'mean_fit_time', \n","                         'std_fit_time',                        \n","                         'mean_score_time', \n","                         'std_score_time']\n","    \n","    # Move the important columns ahead\n","    cv_results = cv_results[important_columns + sorted(list(set(cv_results.columns) - set(important_columns)))]\n","\n","    # Write cv_results file\n","    cv_results.to_csv(path_or_buf=abspath_curr + '/result/mm2022/GridSearchCV_results/' + acronym + '.csv', index=False) #'/result/mnist/cv_results/GridSearchCV/'\n","\n","# Sort best_score_params_estimator_gs in descending order of the best_score_\n","best_score_params_estimator_gs = sorted(best_score_params_estimator_gs, key=lambda x : x[0], reverse=True)\n","\n","# Print best_score_params_estimator_gs\n","pd.DataFrame(best_score_params_estimator_gs, columns=['best_score', 'best_param', 'best_estimator'])"]},{"cell_type":"markdown","metadata":{"id":"kOF6id8le32I"},"source":["## MODEL SELECTION"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HSjxOgI7Wyi1"},"outputs":[],"source":["# Get the best_score, best_params and best_estimator obtained by GridSearchCV\n","best_score_gs, best_params_gs, best_estimator_gs = best_score_params_estimator_gs[0]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1646788866688,"user":{"displayName":"Nate Ehat","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01467513665981823629"},"user_tz":300},"id":"82gfh1eEmpb0","outputId":"fdf5b5f2-bfb8-4721-c088-b5c371f1d6ae"},"outputs":[{"name":"stdout","output_type":"stream","text":["0.2633100340428174\n","{'model__alpha': 0.001, 'model__learning_rate_init': 0.012345679012345678}\n","Pipeline(steps=[('model',\n","                 MLPClassifier(alpha=0.001, early_stopping=True,\n","                               learning_rate_init=0.012345679012345678,\n","                               random_state=42))])\n"]}],"source":["print(best_score_gs)\n","print(best_params_gs)\n","print(best_estimator_gs)"]},{"cell_type":"markdown","metadata":{"id":"fiEBpqc_e32K"},"source":["# GENERATE SUBMISSION FILE\n","###### Use best model as selected above to generate submission file for Kaggle competition:"]},{"cell_type":"markdown","metadata":{"id":"Aw5WYTRGz65s"},"source":["## Create Directory"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"z0oLcggN0C9W"},"outputs":[],"source":["# Make directory\n","directory = os.path.dirname(abspath_curr + '/result/submission/')\n","if not os.path.exists(directory):\n","    os.makedirs(directory)"]},{"cell_type":"markdown","metadata":{"id":"y-Qf_8VM0Tt9"},"source":["## Generate Submission"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mVdD3N0re32L","scrolled":true},"outputs":[],"source":["# Get the prediction on the testing data using best_model\n","y_test_pred = best_estimator_gs.predict(X_test)\n","\n","# Transform y_test_pred back to the original class\n","y_test_pred = le.inverse_transform(y_test_pred)\n","\n","# Get the submission dataframe\n","df_submit = pd.DataFrame(np.hstack((np.arange(1, y_test_pred.shape[0] + 1).reshape(-1, 1), y_test_pred.reshape(-1, 1))),\n","                         columns=['id', target]).astype({'id':int, target:int})                                                                                      \n","\n","# Generate the submission file\n","df_submit.to_csv(abspath_curr + '/result/submission/submission.csv', index=False)                                                                              "]},{"cell_type":"markdown","metadata":{"id":"IZCGr7s09cDG"},"source":["# INTERPRETATION"]},{"cell_type":"markdown","metadata":{"id":"D3dqG5SHLlPk"},"source":["## Create Directory"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BNm50FFQ9cDH"},"outputs":[],"source":["import os\n","\n","# Make directory\n","directory = os.path.dirname(abspath_curr + '/result/figure/')\n","if not os.path.exists(directory):\n","    os.makedirs(directory)"]},{"cell_type":"markdown","metadata":{"id":"733hk_XD9cDI"},"source":["## Feature Importance - Table"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-NLAjG6K9cDJ"},"outputs":[],"source":["# Get the best_score, best_param and best_estimator of random forest obtained by GridSearchCV\n","best_score_rfc, best_param_rfc, best_estimator_rfc = best_score_params_estimator_gs[1]\n","\n","# Get the dataframe of feature and importance\n","df_fi_rfc = pd.DataFrame(np.hstack((np.setdiff1d(df.columns, [target]).reshape(-1, 1), best_estimator_rfc.named_steps['model'].feature_importances_.reshape(-1, 1))),\n","                         columns=['Features', 'Importance'])\n","\n","# Sort df_fi_rfc in descending order of the importance\n","df_fi_rfc = df_fi_rfc.sort_values(ascending=False, by='Importance').reset_index(drop=True)\n","\n","# Print the first 5 rows of df_fi_rfc\n","df_fi_rfc[:]"]},{"cell_type":"code","source":[""],"metadata":{"id":"vtZ80yIQlPwZ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-Tjfao_xLlPo"},"source":["## Feature Importance - Plot"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Tdo0imMv9cDK","scrolled":true},"outputs":[],"source":["# Create a figure\n","fig = plt.figure(figsize=(10, 5))\n","\n","# The bar plot of the top 5 feature importance\n","plt.bar(df_fi_rfc['Features'][:5], df_fi_rfc['Importance'][:5], color='green')\n","\n","# Set x-axis\n","plt.xlabel('Features')\n","plt.xticks(rotation=90)\n","\n","# Set y-axis\n","plt.ylabel('Importance')\n","\n","# Save and show the figure\n","plt.tight_layout()\n","plt.savefig(abspath_curr + '/result/poker/figure/feature_importance_rfc.pdf')\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"RcyNzbII3BR1"},"source":["# SCRATCH NOTES"]},{"cell_type":"code","source":["# SCORING MARGIN / POSSESSIONS\n","tr_data_hub['net-avg-scoring-margin'] = tr_data_hub['average-scoring-margin'] - tr_data_hub['opponent-average-scoring-margin']\n","tr_data_hub['net-points-per-game'] = tr_data_hub['points-per-game'] - tr_data_hub['opponent-points-per-game']\n","tr_data_hub['net-effective-possession-ratio'] = tr_data_hub['effective-possession-ratio'] - tr_data_hub['opponent-effective-possession-ratio']\n","tr_data_hub['net-adj-efficiency'] = tr_data_hub['offensive-efficiency'] - tr_data_hub['defensive-efficiency']\n","\n","# NET SHOOTING PERCENTAGES\n","tr_data_hub['net-effective-field-goal-pct'] = tr_data_hub['effective-field-goal-pct'] - tr_data_hub['opponent-effective-field-goal-pct']\n","tr_data_hub['net-true-shooting-percentage'] = tr_data_hub['true-shooting-percentage'] - tr_data_hub['opponent-true-shooting-percentage']\n","\n","# STOCKS = STEALS + BLOCKS\n","tr_data_hub['stocks-per-game'] = tr_data_hub['steals-per-game'] + tr_data_hub['blocks-per-game']\n","tr_data_hub['opponent-stocks-per-game'] = tr_data_hub['opponent-steals-per-game'] + tr_data_hub['opponent-blocks-per-game']\n","tr_data_hub['net-stocks-per-game'] = tr_data_hub['stocks-per-game'] - tr_data_hub['opponent-stocks-per-game']\n","\n","# AST/TO = TURNOVERS / ASSISTS\n","tr_data_hub['total-turnovers-per-game'] = tr_data_hub['turnovers-per-game'] + tr_data_hub['opponent-turnovers-per-game']\n","tr_data_hub['net-assist--per--turnover-ratio'] = tr_data_hub['assist--per--turnover-ratio'] - tr_data_hub['opponent-assist--per--turnover-ratio']\n","\n","# REBOUNDS\n","tr_data_hub['net-total-rebounds-per-game'] = tr_data_hub['total-rebounds-per-game'] - tr_data_hub['opponent-total-rebounds-per-game']\n","tr_data_hub['net-off-rebound-pct'] = tr_data_hub['offensive-rebounding-pct'] - tr_data_hub['opponent-offensive-rebounding-pct']\n","tr_data_hub['net-def-rebound-pct'] = tr_data_hub['defensive-rebounding-pct'] - tr_data_hub['opponent-defensive-rebounding-pct']\n","  \n","  # ALTERNATE CALC - yields different performance than above\n","    #tr_data_hub['net-off-rebound-pct'] = tr_data_hub['offensive-rebounding-pct'] - tr_data_hub['opponent-defensive-rebounding-pct']\n","    #tr_data_hub['net-def-rebound-pct'] = tr_data_hub['defensive-rebounding-pct'] - tr_data_hub['opponent-offensive-rebounding-pct']\n","\n","tr_data_hub.info()\n","#tr_data_hub.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2EEiLuEPGxcO","executionInfo":{"status":"ok","timestamp":1649128552694,"user_tz":240,"elapsed":165,"user":{"displayName":"Nate Ehat","userId":"01467513665981823629"}},"outputId":"b494df38-64d3-4008-bab5-bcf8f3b2f6cc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 30 entries, Memphis to Okla City\n","Data columns (total 62 columns):\n"," #   Column                                Non-Null Count  Dtype  \n","---  ------                                --------------  -----  \n"," 0   points-per-game                       30 non-null     float64\n"," 1   average-scoring-margin                30 non-null     float64\n"," 2   field-goals-made-per-game             30 non-null     float64\n"," 3   field-goals-attempted-per-game        30 non-null     float64\n"," 4   offensive-efficiency                  30 non-null     float64\n"," 5   defensive-efficiency                  30 non-null     float64\n"," 6   effective-field-goal-pct              30 non-null     float64\n"," 7   true-shooting-percentage              30 non-null     float64\n"," 8   three-point-pct                       30 non-null     float64\n"," 9   two-point-pct                         30 non-null     float64\n"," 10  free-throw-pct                        30 non-null     float64\n"," 11  three-pointers-made-per-game          30 non-null     float64\n"," 12  three-pointers-attempted-per-game     30 non-null     float64\n"," 13  offensive-rebounds-per-game           30 non-null     float64\n"," 14  defensive-rebounds-per-game           30 non-null     float64\n"," 15  total-rebounds-per-game               30 non-null     float64\n"," 16  offensive-rebounding-pct              30 non-null     float64\n"," 17  defensive-rebounding-pct              30 non-null     float64\n"," 18  total-rebounding-percentage           30 non-null     float64\n"," 19  blocks-per-game                       30 non-null     float64\n"," 20  steals-per-game                       30 non-null     float64\n"," 21  assists-per-game                      30 non-null     float64\n"," 22  turnovers-per-game                    30 non-null     float64\n"," 23  assist--per--turnover-ratio           30 non-null     float64\n"," 24  win-pct-all-games                     30 non-null     float64\n"," 25  win-pct-close-games                   30 non-null     float64\n"," 26  possessions-per-game                  30 non-null     float64\n"," 27  personal-fouls-per-game               30 non-null     float64\n"," 28  opponent-points-per-game              30 non-null     float64\n"," 29  opponent-average-scoring-margin       30 non-null     float64\n"," 30  opponent-shooting-pct                 30 non-null     float64\n"," 31  opponent-effective-field-goal-pct     30 non-null     float64\n"," 32  opponent-three-point-pct              30 non-null     float64\n"," 33  opponent-two-point-pct                30 non-null     float64\n"," 34  opponent-free-throw-pct               30 non-null     float64\n"," 35  opponent-true-shooting-percentage     30 non-null     float64\n"," 36  opponent-assists-per-game             30 non-null     float64\n"," 37  opponent-turnovers-per-game           30 non-null     float64\n"," 38  opponent-assist--per--turnover-ratio  30 non-null     float64\n"," 39  effective-possession-ratio            30 non-null     float64\n"," 40  opponent-effective-possession-ratio   30 non-null     float64\n"," 41  opponent-offensive-rebounds-per-game  30 non-null     float64\n"," 42  opponent-defensive-rebounds-per-game  30 non-null     float64\n"," 43  opponent-total-rebounds-per-game      30 non-null     float64\n"," 44  opponent-offensive-rebounding-pct     30 non-null     float64\n"," 45  opponent-defensive-rebounding-pct     30 non-null     float64\n"," 46  opponent-blocks-per-game              30 non-null     float64\n"," 47  opponent-steals-per-game              30 non-null     float64\n"," 48  net-avg-scoring-margin                30 non-null     float64\n"," 49  net-points-per-game                   30 non-null     float64\n"," 50  net-effective-possession-ratio        30 non-null     float64\n"," 51  net-adj-efficiency                    30 non-null     float64\n"," 52  net-effective-field-goal-pct          30 non-null     float64\n"," 53  net-true-shooting-percentage          30 non-null     float64\n"," 54  stocks-per-game                       30 non-null     float64\n"," 55  opponent-stocks-per-game              30 non-null     float64\n"," 56  net-stocks-per-game                   30 non-null     float64\n"," 57  total-turnovers-per-game              30 non-null     float64\n"," 58  net-assist--per--turnover-ratio       30 non-null     float64\n"," 59  net-total-rebounds-per-game           30 non-null     float64\n"," 60  net-off-rebound-pct                   30 non-null     float64\n"," 61  net-def-rebound-pct                   30 non-null     float64\n","dtypes: float64(62)\n","memory usage: 14.8+ KB\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lxGI4p2pLJFS"},"outputs":[],"source":[""]},{"cell_type":"markdown","metadata":{"id":"S3TPza1g_VGy"},"source":["## PCA"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cdZoRTVQJZ7m"},"outputs":[],"source":["#%%\n","\n","X = df[features].values\n","X = StandardScaler().fit_transform(X)\n","\n","#%%\n","pca = PCA(n_components='mle', svd_solver='full') # 'mle'\n","\n","pca.fit(X)\n","X_PCA = pca.transform(X)\n","print('ORIGINAL DIMENSIONS:', X.shape)\n","print('TRANSFORMED DIMENSIONS:', X_PCA.shape)\n","print(f'EXPLAINED VARIANCE RATIO: {pca.explained_variance_ratio_}')\n","\n","#%%\n","x = np.arange(1, len(np.cumsum(pca.explained_variance_ratio_))+1, 1)\n","\n","plt.figure(figsize=(12,8))\n","plt.plot(x, np.cumsum(pca.explained_variance_ratio_))\n","plt.xticks(x)\n","\n","plt.show()\n"]},{"cell_type":"markdown","metadata":{"id":"KKBT7EqP_cFR"},"source":["## SVD"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"S-jSehGW_bYy"},"outputs":[],"source":["# SINGULAR VALUE DECOMPOSITION ANALYSIS [SVD]\n","# CONDITION NUMBER\n","\n","# ORIGINAL DATA\n","\n","from numpy import linalg as LA\n","\n","H = np.matmul(X.T, X)\n","_, d, _ = np.linalg.svd(H)\n","print(f'ORIGINAL DATA: SINGULAR VALUES {d}')\n","print(f'ORIGINAL DATA: CONDITIONAL NUMBER {LA.cond(X)}')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9jxCphjMJZ4s"},"outputs":[],"source":["# TRANSFORMED DATA\n","H_PCA = np.matmul(X_PCA.T, X_PCA)\n","_, d_PCA, _ = np.linalg.svd(H_PCA)\n","print(f'TRANSFORMED DATA: SINGULAR VALUES {d_PCA}')\n","print(f'TRANSFORMED DATA: CONDITIONAL NUMBER {LA.cond(X_PCA)}')\n","print('*'*58)\n","\n","#%%\n","# CONSTRUCTION OF REDUCED DIMENSION DATASET\n","\n","#pca_df = pca.explained_variance_ratio_\n","\n","a, b = X_PCA.shape\n","column = []\n","\n","for i in range(b):\n","    column.append(f'PRINCIPAL COLUMN {i+1}')\n","\n","df_PCA = pd.DataFrame(data=X_PCA, columns=column)\n","df_PCA = pd.concat([df_PCA, Y], axis=1)\n","\n","df_PCA.info()"]}],"metadata":{"colab":{"collapsed_sections":["b5yliVJv9jby","nD8xpzLNRsvs","cznJiGz9SmQ1","ZQXM6aO9RQeY","fW54hfPWxb8H","3ANJgcjz3E2p","oZl9LDdbkTV8","fiEBpqc_e32K","IZCGr7s09cDG","RcyNzbII3BR1"],"name":"NBA_Historical","provenance":[{"file_id":"1T4jl3cmhlUh3VnLwC_LHFP9Jmo-aV0-i","timestamp":1649215658454}],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}